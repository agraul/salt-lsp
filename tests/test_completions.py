from types import SimpleNamespace
from salt_lsp.server import salt_server
from salt_lsp.base_types import StateNameCompletion


TEST_FILE = """saltmaster.packages:
  pkg.installed:
    - pkgs:
      - salt-master

/srv/git/salt-states:
  file.:
    - target: /srv/salt

git -C /srv/salt pull -q:
  cron.:
    - user: root
    - minute: '*/5'
"""

MODULE_DOCS = {
    "file": "Operations on regular files, special files, directories, and symlinks\n=====================================================================\n\nSalt States can aggressively manipulate files on a system. There are a number\nof ways in which files can be managed.\n\nRegular files can be enforced with the :mod:`file.managed\n<salt.states.file.managed>` state. This state downloads files from the salt\nmaster and places them on the target system. Managed files can be rendered as a\njinja, mako, or wempy template, adding a dynamic component to file management.\nAn example of :mod:`file.managed <salt.states.file.managed>` which makes use of\nthe jinja templating system would look like this:\n\n    /etc/http/conf/http.conf:\n      file.managed:\n        - source: salt://apache/http.conf\n        - user: root\n        - group: root\n        - mode: 644\n        - attrs: ai\n        - template: jinja\n        - defaults:\n            custom_var: \"default value\"\n            other_var: 123\n    {% if grains['os'] == 'Ubuntu' %}\n        - context:\n            custom_var: \"override\"\n    {% endif %}\n\nIt is also possible to use the :mod:`py renderer <salt.renderers.py>` as a\ntemplating option. The template would be a Python script which would need to\ncontain a function called ``run()``, which returns a string. All arguments\nto the state will be made available to the Python script as globals. The\nreturned string will be the contents of the managed file. For example:\n\n    def run():\n        lines = ['foo', 'bar', 'baz']\n        lines.extend([source, name, user, context])  # Arguments as globals\n        return '\\n\\n'.join(lines)\n\nNote:\n\n    The ``defaults`` and ``context`` arguments require extra indentation (four\n    spaces instead of the normal two) in order to create a nested dictionary.\n    :ref:`More information <nested-dict-indentation>`.\n\nIf using a template, any user-defined template variables in the file defined in\n``source`` must be passed in using the ``defaults`` and/or ``context``\narguments. The general best practice is to place default values in\n``defaults``, with conditional overrides going into ``context``, as seen above.\n\nThe template will receive a variable ``custom_var``, which would be accessed in\nthe template using ``{{ custom_var }}``. If the operating system is Ubuntu, the\nvalue of the variable ``custom_var`` would be *override*, otherwise it is the\ndefault *default value*\n\nThe ``source`` parameter can be specified as a list. If this is done, then the\nfirst file to be matched will be the one that is used. This allows you to have\na default file on which to fall back if the desired file does not exist on the\nsalt fileserver. Here's an example:\n\n    /etc/foo.conf:\n      file.managed:\n        - source:\n          - salt://foo.conf.{{ grains['fqdn'] }}\n          - salt://foo.conf.fallback\n        - user: foo\n        - group: users\n        - mode: 644\n        - attrs: i\n        - backup: minion\n\nNote:\n\n    Salt supports backing up managed files via the backup option. For more\n    details on this functionality please review the\n    :ref:`backup_mode documentation <file-state-backups>`.\n\nThe ``source`` parameter can also specify a file in another Salt environment.\nIn this example ``foo.conf`` in the ``dev`` environment will be used instead.\n\n    /etc/foo.conf:\n      file.managed:\n        - source:\n          - 'salt://foo.conf?saltenv=dev'\n        - user: foo\n        - group: users\n        - mode: '0644'\n        - attrs: i\n\nWarning:\n\n    When using a mode that includes a leading zero you must wrap the\n    value in single quotes. If the value is not wrapped in quotes it\n    will be read by YAML as an integer and evaluated as an octal.\n\nThe ``names`` parameter, which is part of the state compiler, can be used to\nexpand the contents of a single state declaration into multiple, single state\ndeclarations. Each item in the ``names`` list receives its own individual state\n``name`` and is converted into its own low-data structure. This is a convenient\nway to manage several files with similar attributes.\n\n    salt_master_conf:\n      file.managed:\n        - user: root\n        - group: root\n        - mode: '0644'\n        - names:\n          - /etc/salt/master.d/master.conf:\n            - source: salt://saltmaster/master.conf\n          - /etc/salt/minion.d/minion-99.conf:\n            - source: salt://saltmaster/minion.conf\n\nNote:\n\n    There is more documentation about this feature in the :ref:`Names declaration\n    <names-declaration>` section of the :ref:`Highstate docs <states-highstate>`.\n\nSpecial files can be managed via the ``mknod`` function. This function will\ncreate and enforce the permissions on a special file. The function supports the\ncreation of character devices, block devices, and FIFO pipes. The function will\ncreate the directory structure up to the special file if it is needed on the\nminion. The function will not overwrite or operate on (change major/minor\nnumbers) existing special files with the exception of user, group, and\npermissions. In most cases the creation of some special files require root\npermissions on the minion. This would require that the minion to be run as the\nroot user. Here is an example of a character device:\n\n    /var/named/chroot/dev/random:\n      file.mknod:\n        - ntype: c\n        - major: 1\n        - minor: 8\n        - user: named\n        - group: named\n        - mode: 660\n\nHere is an example of a block device:\n\n    /var/named/chroot/dev/loop0:\n      file.mknod:\n        - ntype: b\n        - major: 7\n        - minor: 0\n        - user: named\n        - group: named\n        - mode: 660\n\nHere is an example of a fifo pipe:\n\n    /var/named/chroot/var/log/logfifo:\n      file.mknod:\n        - ntype: p\n        - user: named\n        - group: named\n        - mode: 660\n\nDirectories can be managed via the ``directory`` function. This function can\ncreate and enforce the permissions on a directory. A directory statement will\nlook like this:\n\n    /srv/stuff/substuf:\n      file.directory:\n        - user: fred\n        - group: users\n        - mode: 755\n        - makedirs: True\n\nIf you need to enforce user and/or group ownership or permissions recursively\non the directory's contents, you can do so by adding a ``recurse`` directive:\n\n    /srv/stuff/substuf:\n      file.directory:\n        - user: fred\n        - group: users\n        - mode: 755\n        - makedirs: True\n        - recurse:\n          - user\n          - group\n          - mode\n\nAs a default, ``mode`` will resolve to ``dir_mode`` and ``file_mode``, to\nspecify both directory and file permissions, use this form:\n\n    /srv/stuff/substuf:\n      file.directory:\n        - user: fred\n        - group: users\n        - file_mode: 744\n        - dir_mode: 755\n        - makedirs: True\n        - recurse:\n          - user\n          - group\n          - mode\n\nSymlinks can be easily created; the symlink function is very simple and only\ntakes a few arguments:\n\n    /etc/grub.conf:\n      file.symlink:\n        - target: /boot/grub/grub.conf\n\nRecursive directory management can also be set via the ``recurse``\nfunction. Recursive directory management allows for a directory on the salt\nmaster to be recursively copied down to the minion. This is a great tool for\ndeploying large code and configuration systems. A state using ``recurse``\nwould look something like this:\n\n    /opt/code/flask:\n      file.recurse:\n        - source: salt://code/flask\n        - include_empty: True\n\nA more complex ``recurse`` example:\n\n    {% set site_user = 'testuser' %}\n    {% set site_name = 'test_site' %}\n    {% set project_name = 'test_proj' %}\n    {% set sites_dir = 'test_dir' %}\n\n    django-project:\n      file.recurse:\n        - name: {{ sites_dir }}/{{ site_name }}/{{ project_name }}\n        - user: {{ site_user }}\n        - dir_mode: 2775\n        - file_mode: '0644'\n        - template: jinja\n        - source: salt://project/templates_dir\n        - include_empty: True\n\nRetention scheduling can be applied to manage contents of backup directories.\nFor example:\n\n    /var/backups/example_directory:\n      file.retention_schedule:\n        - strptime_format: example_name_%Y%m%dT%H%M%S.tar.bz2\n        - retain:\n            most_recent: 5\n            first_of_hour: 4\n            first_of_day: 14\n            first_of_week: 6\n            first_of_month: 6\n            first_of_year: all",
    "file.absent": "Make sure that the named file or directory is absent. If it exists, it will\nbe deleted. This will work to reverse any of the functions in the file\nstate module. If a directory is supplied, it will be recursively deleted.\n\nname\n    The path which should be deleted",
    "file.accumulated": "Prepare accumulator which can be used in template in file.managed state.\nAccumulator dictionary becomes available in template. It can also be used\nin file.blockreplace.\n\nname\n    Accumulator name\n\nfilename\n    Filename which would receive this accumulator (see file.managed state\n    documentation about ``name``)\n\ntext\n    String or list for adding in accumulator\n\nrequire_in / watch_in\n    One of them required for sure we fill up accumulator before we manage\n    the file. Probably the same as filename\n\nExample:\n\nGiven the following:\n\n    animals_doing_things:\n      file.accumulated:\n        - filename: /tmp/animal_file.txt\n        - text: ' jumps over the lazy dog.'\n        - require_in:\n          - file: animal_file\n\n    animal_file:\n      file.managed:\n        - name: /tmp/animal_file.txt\n        - source: salt://animal_file.txt\n        - template: jinja\n\nOne might write a template for ``animal_file.txt`` like the following:\n\n    The quick brown fox{% for animal in accumulator['animals_doing_things'] %}{{ animal }}{% endfor %}\n\nCollectively, the above states and template file will produce:\n\n    The quick brown fox jumps over the lazy dog.\n\nMultiple accumulators can be \"chained\" together.\n\nNote:\n    The 'accumulator' data structure is a Python dictionary.\n    Do not expect any loop over the keys in a deterministic order!",
    "file.append": 'Ensure that some text appears at the end of a file.\n\nThe text will not be appended if it already exists in the file.\nA single string of text or a list of strings may be appended.\n\nname\n    The location of the file to append to.\n\ntext\n    The text to be appended, which can be a single string or a list\n    of strings.\n\nmakedirs\n    If the file is located in a path without a parent directory,\n    then the state will fail. If makedirs is set to True, then\n    the parent directories will be created to facilitate the\n    creation of the named file. Defaults to False.\n\nsource\n    A single source file to append. This source file can be hosted on either\n    the salt master server, or on an HTTP or FTP server. Both HTTPS and\n    HTTP are supported as well as downloading directly from Amazon S3\n    compatible URLs with both pre-configured and automatic IAM credentials\n    (see s3.get state documentation). File retrieval from Openstack Swift\n    object storage is supported via swift://container/object_path URLs\n    (see swift.get documentation).\n\n    For files hosted on the salt file server, if the file is located on\n    the master in the directory named spam, and is called eggs, the source\n    string is salt://spam/eggs.\n\n    If the file is hosted on an HTTP or FTP server, the source_hash argument\n    is also required.\n\nsource_hash\n    This can be one of the following:\n        1. a source hash string\n        2. the URI of a file that contains source hash strings\n\n    The function accepts the first encountered long unbroken alphanumeric\n    string of correct length as a valid hash, in order from most secure to\n    least secure:\n\n        Type    Length\n        ======  ======\n        sha512     128\n        sha384      96\n        sha256      64\n        sha224      56\n        sha1        40\n        md5         32\n\n    See the ``source_hash`` parameter description for :mod:`file.managed\n    <salt.states.file.managed>` function for more details and examples.\n\ntemplate\n    The named templating engine will be used to render the appended-to file.\n    Defaults to ``jinja``. The following templates are supported:\n\n    - :mod:`cheetah<salt.renderers.cheetah>`\n    - :mod:`genshi<salt.renderers.genshi>`\n    - :mod:`jinja<salt.renderers.jinja>`\n    - :mod:`mako<salt.renderers.mako>`\n    - :mod:`py<salt.renderers.py>`\n    - :mod:`wempy<salt.renderers.wempy>`\n\nsources\n    A list of source files to append. If the files are hosted on an HTTP or\n    FTP server, the source_hashes argument is also required.\n\nsource_hashes\n    A list of source_hashes corresponding to the sources list specified in\n    the sources argument.\n\ndefaults\n    Default context passed to the template.\n\ncontext\n    Overrides default context variables passed to the template.\n\nignore_whitespace\n    New in version 2015.8.4\n\n    Spaces and Tabs in text are ignored by default, when searching for the\n    appending content, one space or multiple tabs are the same for salt.\n    Set this option to ``False`` if you want to change this behavior.\n\nMulti-line example:\n\n    /etc/motd:\n      file.append:\n        - text: |\n            Thou hadst better eat salt with the Philosophers of Greece,\n            than sugar with the Courtiers of Italy.\n            - Benjamin Franklin\n\nMultiple lines of text:\n\n    /etc/motd:\n      file.append:\n        - text:\n          - Trust no one unless you have eaten much salt with him.\n          - "Salt is born of the purest of parents: the sun and the sea."\n\nGather text from multiple template files:\n\n    /etc/motd:\n      file:\n        - append\n        - template: jinja\n        - sources:\n          - salt://motd/devops-messages.tmpl\n          - salt://motd/hr-messages.tmpl\n          - salt://motd/general-messages.tmpl\n\nNew in version 0.9.5',
    "file.blockreplace": "Maintain an edit in a file in a zone delimited by two line markers\n\nNew in version 2014.1.0\nChanged in version 2017.7.5,2018.3.1\n    ``append_newline`` argument added. Additionally, to improve\n    idempotence, if the string represented by ``marker_end`` is found in\n    the middle of the line, the content preceding the marker will be\n    removed when the block is replaced. This allows one to remove\n    ``append_newline: False`` from the SLS and have the block properly\n    replaced if the end of the content block is immediately followed by the\n    ``marker_end`` (i.e. no newline before the marker).\n\nA block of content delimited by comments can help you manage several lines\nentries without worrying about old entries removal. This can help you\nmaintaining an un-managed file containing manual edits.\n\nNote:\n    This function will store two copies of the file in-memory (the original\n    version and the edited version) in order to detect changes and only\n    edit the targeted file if necessary.\n\n    Additionally, you can use :py:func:`file.accumulated\n    <salt.states.file.accumulated>` and target this state. All accumulated\n    data dictionaries' content will be added in the content block.\n\nname\n    Filesystem path to the file to be edited\n\nmarker_start\n    The line content identifying a line as the start of the content block.\n    Note that the whole line containing this marker will be considered, so\n    whitespace or extra content before or after the marker is included in\n    final output\n\nmarker_end\n    The line content identifying the end of the content block. As of\n    versions 2017.7.5 and 2018.3.1, everything up to the text matching the\n    marker will be replaced, so it's important to ensure that your marker\n    includes the beginning of the text you wish to replace.\n\ncontent\n    The content to be used between the two lines identified by\n    ``marker_start`` and ``marker_end``\n\nsource\n    The source file to download to the minion, this source file can be\n    hosted on either the salt master server, or on an HTTP or FTP server.\n    Both HTTPS and HTTP are supported as well as downloading directly\n    from Amazon S3 compatible URLs with both pre-configured and automatic\n    IAM credentials. (see s3.get state documentation)\n    File retrieval from Openstack Swift object storage is supported via\n    swift://container/object_path URLs, see swift.get documentation.\n    For files hosted on the salt file server, if the file is located on\n    the master in the directory named spam, and is called eggs, the source\n    string is salt://spam/eggs. If source is left blank or None\n    (use ~ in YAML), the file will be created as an empty file and\n    the content will not be managed. This is also the case when a file\n    already exists and the source is undefined; the contents of the file\n    will not be changed or managed.\n\n    If the file is hosted on a HTTP or FTP server then the source_hash\n    argument is also required.\n\n    A list of sources can also be passed in to provide a default source and\n    a set of fallbacks. The first source in the list that is found to exist\n    will be used and subsequent entries in the list will be ignored.\n\n        file_override_example:\n          file.blockreplace:\n            - name: /etc/example.conf\n            - source:\n              - salt://file_that_does_not_exist\n              - salt://file_that_exists\n\nsource_hash\n    This can be one of the following:\n        1. a source hash string\n        2. the URI of a file that contains source hash strings\n\n    The function accepts the first encountered long unbroken alphanumeric\n    string of correct length as a valid hash, in order from most secure to\n    least secure:\n\n        Type    Length\n        ======  ======\n        sha512     128\n        sha384      96\n        sha256      64\n        sha224      56\n        sha1        40\n        md5         32\n\n    See the ``source_hash`` parameter description for :mod:`file.managed\n    <salt.states.file.managed>` function for more details and examples.\n\ntemplate : jinja\n    Templating engine to be used to render the downloaded file. The\n    following engines are supported:\n\n    - :mod:`cheetah <salt.renderers.cheetah>`\n    - :mod:`genshi <salt.renderers.genshi>`\n    - :mod:`jinja <salt.renderers.jinja>`\n    - :mod:`mako <salt.renderers.mako>`\n    - :mod:`py <salt.renderers.py>`\n    - :mod:`wempy <salt.renderers.wempy>`\n\ncontext\n    Overrides default context variables passed to the template\n\ndefaults\n    Default context passed to the template\n\nappend_if_not_found : False\n    If markers are not found and this option is set to ``True``, the\n    content block will be appended to the file.\n\nprepend_if_not_found : False\n    If markers are not found and this option is set to ``True``, the\n    content block will be prepended to the file.\n\ninsert_before_match\n    If markers are not found, this parameter can be set to a regex which will\n    insert the block before the first found occurrence in the file.\n\n    New in version Sodium\n\ninsert_after_match\n    If markers are not found, this parameter can be set to a regex which will\n    insert the block after the first found occurrence in the file.\n\n    New in version Sodium\n\nbackup\n    The file extension to use for a backup of the file if any edit is made.\n    Set this to ``False`` to skip making a backup.\n\ndry_run : False\n    If ``True``, do not make any edits to the file and simply return the\n    changes that *would* be made.\n\nshow_changes : True\n    Controls how changes are presented. If ``True``, the ``Changes``\n    section of the state return will contain a unified diff of the changes\n    made. If False, then it will contain a boolean (``True`` if any changes\n    were made, otherwise ``False``).\n\nappend_newline\n    Controls whether or not a newline is appended to the content block. If\n    the value of this argument is ``True`` then a newline will be added to\n    the content block. If it is ``False``, then a newline will *not* be\n    added to the content block. If it is unspecified, then a newline will\n    only be added to the content block if it does not already end in a\n    newline.\n\n    New in version 2017.7.5,2018.3.1\n\nExample of usage with an accumulator and with a variable:\n\n    {% set myvar = 42 %}\n    hosts-config-block-{{ myvar }}:\n      file.blockreplace:\n        - name: /etc/hosts\n        - marker_start: \"# START managed zone {{ myvar }} -DO-NOT-EDIT-\"\n        - marker_end: \"# END managed zone {{ myvar }} --\"\n        - content: 'First line of content'\n        - append_if_not_found: True\n        - backup: '.bak'\n        - show_changes: True\n\n    hosts-config-block-{{ myvar }}-accumulated1:\n      file.accumulated:\n        - filename: /etc/hosts\n        - name: my-accumulator-{{ myvar }}\n        - text: \"text 2\"\n        - require_in:\n          - file: hosts-config-block-{{ myvar }}\n\n    hosts-config-block-{{ myvar }}-accumulated2:\n      file.accumulated:\n        - filename: /etc/hosts\n        - name: my-accumulator-{{ myvar }}\n        - text: |\n             text 3\n             text 4\n        - require_in:\n          - file: hosts-config-block-{{ myvar }}\n\nwill generate and maintain a block of content in ``/etc/hosts``:\n\n    # START managed zone 42 -DO-NOT-EDIT-\n    First line of content\n    text 2\n    text 3\n    text 4\n    # END managed zone 42 --",
    "file.cached": "New in version 2017.7.3\n\nEnsures that a file is saved to the minion's cache. This state is primarily\ninvoked by other states to ensure that we do not re-download a source file\nif we do not need to.\n\nname\n    The URL of the file to be cached. To cache a file from an environment\n    other than ``base``, either use the ``saltenv`` argument or include the\n    saltenv in the URL (e.g. ``salt://path/to/file.conf?saltenv=dev``).\n\n    Note:\n        A list of URLs is not supported, this must be a single URL. If a\n        local file is passed here, then the state will obviously not try to\n        download anything, but it will compare a hash if one is specified.\n\nsource_hash\n    See the documentation for this same argument in the\n    :py:func:`file.managed <salt.states.file.managed>` state.\n\n    Note:\n        For remote files not originating from the ``salt://`` fileserver,\n        such as http(s) or ftp servers, this state will not re-download the\n        file if the locally-cached copy matches this hash. This is done to\n        prevent unnecessary downloading on repeated runs of this state. To\n        update the cached copy of a file, it is necessary to update this\n        hash.\n\nsource_hash_name\n    See the documentation for this same argument in the\n    :py:func:`file.managed <salt.states.file.managed>` state.\n\nskip_verify\n    See the documentation for this same argument in the\n    :py:func:`file.managed <salt.states.file.managed>` state.\n\n    Note:\n        Setting this to ``True`` will result in a copy of the file being\n        downloaded from a remote (http(s), ftp, etc.) source each time the\n        state is run.\n\nsaltenv\n    Used to specify the environment from which to download a file from the\n    Salt fileserver (i.e. those with ``salt://`` URL).\n\n\nThis state will in most cases not be useful in SLS files, but it is useful\nwhen writing a state or remote-execution module that needs to make sure\nthat a file at a given URL has been downloaded to the cachedir. One example\nof this is in the :py:func:`archive.extracted <salt.states.file.extracted>`\nstate:\n\n    result = __states__['file.cached'](source_match,\n                                       source_hash=source_hash,\n                                       source_hash_name=source_hash_name,\n                                       skip_verify=skip_verify,\n                                       saltenv=__env__)\n\nThis will return a dictionary containing the state's return data, including\na ``result`` key which will state whether or not the state was successful.\nNote that this will not catch exceptions, so it is best used within a\ntry/except.\n\nOnce this state has been run from within another state or remote-execution\nmodule, the actual location of the cached file can be obtained using\n:py:func:`cp.is_cached <salt.modules.cp.is_cached>`:\n\n    cached = __salt__['cp.is_cached'](source_match, saltenv=__env__)\n\nThis function will return the cached path of the file, or an empty string\nif the file is not present in the minion cache.",
    "file.comment": "Comment out specified lines in a file.\n\nname\n    The full path to the file to be edited\nregex\n    A regular expression used to find the lines that are to be commented;\n    this pattern will be wrapped in parenthesis and will move any\n    preceding/trailing ``^`` or ``$`` characters outside the parenthesis\n    (e.g., the pattern ``^foo$`` will be rewritten as ``^(foo)$``)\n    Note that you _need_ the leading ^, otherwise each time you run\n    highstate, another comment char will be inserted.\nchar : ``#``\n    The character to be inserted at the beginning of a line in order to\n    comment it out\nbackup : ``.bak``\n    The file will be backed up before edit with this file extension\n\n    Warning:\n\n        This backup will be overwritten each time ``sed`` / ``comment`` /\n        ``uncomment`` is called. Meaning the backup will only be useful\n        after the first invocation.\n\n    Set to False/None to not keep a backup.\n\nUsage:\n\n    /etc/fstab:\n      file.comment:\n        - regex: ^bind 127.0.0.1\n\nNew in version 0.9.5",
    "file.copy": "If the file defined by the ``source`` option exists on the minion, copy it\nto the named path. The file will not be overwritten if it already exists,\nunless the ``force`` option is set to ``True``.\n\nNote:\n    This state only copies files from one location on a minion to another\n    location on the same minion. For copying files from the master, use a\n    :py:func:`file.managed <salt.states.file.managed>` state.\n\nname\n    The location of the file to copy to\n\nsource\n    The location of the file to copy to the location specified with name\n\nforce\n    If the target location is present then the file will not be moved,\n    specify \"force: True\" to overwrite the target file\n\nmakedirs\n    If the target subdirectories don't exist create them\n\npreserve\n    New in version 2015.5.0\n\n    Set ``preserve: True`` to preserve user/group ownership and mode\n    after copying. Default is ``False``. If ``preserve`` is set to ``True``,\n    then user/group/mode attributes will be ignored.\n\nuser\n    New in version 2015.5.0\n\n    The user to own the copied file, this defaults to the user salt is\n    running as on the minion. If ``preserve`` is set to ``True``, then\n    this will be ignored\n\ngroup\n    New in version 2015.5.0\n\n    The group to own the copied file, this defaults to the group salt is\n    running as on the minion. If ``preserve`` is set to ``True`` or on\n    Windows this will be ignored\n\nmode\n    New in version 2015.5.0\n\n    The permissions to set on the copied file, aka 644, '0775', '4664'.\n    If ``preserve`` is set to ``True``, then this will be ignored.\n    Not supported on Windows.\n\n    The default mode for new files and directories corresponds umask of salt\n    process. For existing files and directories it's not enforced.\n\nsubdir\n    New in version 2015.5.0\n\n    If the name is a directory then place the file inside the named\n    directory\n\nNote:\n    The copy function accepts paths that are local to the Salt minion.\n    This function does not support salt://, http://, or the other\n    additional file paths that are supported by :mod:`states.file.managed\n    <salt.states.file.managed>` and :mod:`states.file.recurse\n    <salt.states.file.recurse>`.\n\nUsage:\n\n    # Use 'copy', not 'copy_'\n    /etc/example.conf:\n      file.copy:\n        - source: /tmp/example.conf",
    "file.decode": "Decode an encoded file and write it to disk\n\nNew in version 2016.3.0\n\nname\n    Path of the file to be written.\nencoded_data\n    The encoded file. Either this option or ``contents_pillar`` must be\n    specified.\ncontents_pillar\n    A Pillar path to the encoded file. Uses the same path syntax as\n    :py:func:`pillar.get <salt.modules.pillar.get>`. The\n    :py:func:`hashutil.base64_encodefile\n    <salt.modules.hashutil.base64_encodefile>` function can load encoded\n    content into Pillar. Either this option or ``encoded_data`` must be\n    specified.\nencoding_type : ``base64``\n    The type of encoding.\nchecksum : ``md5``\n    The hashing algorithm to use to generate checksums. Wraps the\n    :py:func:`hashutil.digest <salt.modules.hashutil.digest>` execution\n    function.\n\nUsage:\n\n    write_base64_encoded_string_to_a_file:\n      file.decode:\n        - name: /tmp/new_file\n        - encoding_type: base64\n        - contents_pillar: mypillar:thefile\n\n    # or\n\n    write_base64_encoded_string_to_a_file:\n      file.decode:\n        - name: /tmp/new_file\n        - encoding_type: base64\n        - encoded_data: |\n            Z2V0IHNhbHRlZAo=\n\nBe careful with multi-line strings that the YAML indentation is correct.\nE.g.,\n\n    write_base64_encoded_string_to_a_file:\n      file.decode:\n        - name: /tmp/new_file\n        - encoding_type: base64\n        - encoded_data: |\n            {{ salt.pillar.get('path:to:data') | indent(8) }}",
    "file.directory": "Ensure that a named directory is present and has the right perms\n\nname\n    The location to create or manage a directory, as an absolute path\n\nuser\n    The user to own the directory; this defaults to the user salt is\n    running as on the minion\n\ngroup\n    The group ownership set for the directory; this defaults to the group\n    salt is running as on the minion. On Windows, this is ignored\n\nrecurse\n    Enforce user/group ownership and mode of directory recursively. Accepts\n    a list of strings representing what you would like to recurse.  If\n    ``mode`` is defined, will recurse on both ``file_mode`` and ``dir_mode`` if\n    they are defined.  If ``ignore_files`` or ``ignore_dirs`` is included, files or\n    directories will be left unchanged respectively.\n    directories will be left unchanged respectively. If ``silent`` is defined,\n    individual file/directory change notifications will be suppressed.\n\n    Example:\n\n        /var/log/httpd:\n          file.directory:\n            - user: root\n            - group: root\n            - dir_mode: 755\n            - file_mode: 644\n            - recurse:\n              - user\n              - group\n              - mode\n\n    Leave files or directories unchanged:\n\n        /var/log/httpd:\n          file.directory:\n            - user: root\n            - group: root\n            - dir_mode: 755\n            - file_mode: 644\n            - recurse:\n              - user\n              - group\n              - mode\n              - ignore_dirs\n\n    New in version 2015.5.0\n\nmax_depth\n    Limit the recursion depth. The default is no limit=None.\n    'max_depth' and 'clean' are mutually exclusive.\n\n    New in version 2016.11.0\n\ndir_mode / mode\n    The permissions mode to set any directories created. Not supported on\n    Windows.\n\n    The default mode for new files and directories corresponds umask of salt\n    process. For existing files and directories it's not enforced.\n\nfile_mode\n    The permissions mode to set any files created if 'mode' is run in\n    'recurse'. This defaults to dir_mode. Not supported on Windows.\n\n    The default mode for new files and directories corresponds umask of salt\n    process. For existing files and directories it's not enforced.\n\nmakedirs\n    If the directory is located in a path without a parent directory, then\n    the state will fail. If makedirs is set to True, then the parent\n    directories will be created to facilitate the creation of the named\n    file.\n\nclean\n    Make sure that only files that are set up by salt and required by this\n    function are kept. If this option is set then everything in this\n    directory will be deleted unless it is required.\n    'clean' and 'max_depth' are mutually exclusive.\n\nrequire\n    Require other resources such as packages or files\n\nexclude_pat\n    When 'clean' is set to True, exclude this pattern from removal list\n    and preserve in the destination.\n\nfollow_symlinks : False\n    If the desired path is a symlink (or ``recurse`` is defined and a\n    symlink is encountered while recursing), follow it and check the\n    permissions of the directory/file to which the symlink points.\n\n    New in version 2014.1.4\n\n    Changed in version 3001.1\n        If set to False symlinks permissions are ignored on Linux systems\n        because it does not support permissions modification. Symlinks\n        permissions are always 0o777 on Linux.\n\nforce\n    If the name of the directory exists and is not a directory and\n    force is set to False, the state will fail. If force is set to\n    True, the file in the way of the directory will be deleted to\n    make room for the directory, unless backupname is set,\n    then it will be renamed.\n\n    New in version 2014.7.0\n\nbackupname\n    If the name of the directory exists and is not a directory, it will be\n    renamed to the backupname. If the backupname already\n    exists and force is False, the state will fail. Otherwise, the\n    backupname will be removed first.\n\n    New in version 2014.7.0\n\nallow_symlink : True\n    If allow_symlink is True and the specified path is a symlink, it will be\n    allowed to remain if it points to a directory. If allow_symlink is False\n    then the state will fail, unless force is also set to True, in which case\n    it will be removed or renamed, depending on the value of the backupname\n    argument.\n\n    New in version 2014.7.0\n\nchildren_only : False\n    If children_only is True the base of a path is excluded when performing\n    a recursive operation. In case of /path/to/base, base will be ignored\n    while all of /path/to/base/* are still operated on.\n\nwin_owner : None\n    The owner of the directory. If this is not passed, user will be used. If\n    user is not passed, the account under which Salt is running will be\n    used.\n\n    New in version 2017.7.0\n\nwin_perms : None\n    A dictionary containing permissions to grant and their propagation. For\n    example: ``{'Administrators': {'perms': 'full_control', 'applies_to':\n    'this_folder_only'}}`` Can be a single basic perm or a list of advanced\n    perms. ``perms`` must be specified. ``applies_to`` is optional and\n    defaults to ``this_folder_subfolder_files``.\n\n    New in version 2017.7.0\n\nwin_deny_perms : None\n    A dictionary containing permissions to deny and their propagation. For\n    example: ``{'Administrators': {'perms': 'full_control', 'applies_to':\n    'this_folder_only'}}`` Can be a single basic perm or a list of advanced\n    perms.\n\n    New in version 2017.7.0\n\nwin_inheritance : True\n    True to inherit permissions from the parent directory, False not to\n    inherit permission.\n\n    New in version 2017.7.0\n\nwin_perms_reset : False\n    If ``True`` the existing DACL will be cleared and replaced with the\n    settings defined in this function. If ``False``, new entries will be\n    appended to the existing DACL. Default is ``False``.\n\n    New in version 2018.3.0\n\nHere's an example using the above ``win_*`` parameters:\n\n    create_config_dir:\n      file.directory:\n        - name: 'C:\\config\\'\n        - win_owner: Administrators\n        - win_perms:\n            # Basic Permissions\n            dev_ops:\n              perms: full_control\n            # List of advanced permissions\n            appuser:\n              perms:\n                - read_attributes\n                - read_ea\n                - create_folders\n                - read_permissions\n              applies_to: this_folder_only\n            joe_snuffy:\n              perms: read\n              applies_to: this_folder_files\n        - win_deny_perms:\n            fred_snuffy:\n              perms: full_control\n        - win_inheritance: False",
    "file.exists": "Verify that the named file or directory is present or exists.\nEnsures pre-requisites outside of Salt's purview\n(e.g., keytabs, private keys, etc.) have been previously satisfied before\ndeployment.\n\nThis function does not create the file if it doesn't exist, it will return\nan error.\n\nname\n    Absolute path which must exist",
    "file.hardlink": "Create a hard link\nIf the file already exists and is a hard link pointing to any location other\nthan the specified target, the hard link will be replaced. If the hard link\nis a regular file or directory then the state will return False. If the\nregular file is desired to be replaced with a hard link pass force: True\n\nname\n    The location of the hard link to create\ntarget\n    The location that the hard link points to\nforce\n    If the name of the hard link exists and force is set to False, the\n    state will fail. If force is set to True, the file or directory in the\n    way of the hard link file will be deleted to make room for the hard\n    link, unless backupname is set, when it will be renamed\nmakedirs\n    If the location of the hard link does not already have a parent directory\n    then the state will fail, setting makedirs to True will allow Salt to\n    create the parent directory\nuser\n    The user to own any directories made if makedirs is set to true. This\n    defaults to the user salt is running as on the minion\ngroup\n    The group ownership set on any directories made if makedirs is set to\n    true. This defaults to the group salt is running as on the minion. On\n    Windows, this is ignored\ndir_mode\n    If directories are to be created, passing this option specifies the\n    permissions for those directories.",
    "file.keyvalue": "Key/Value based editing of a file.\n\nNew in version 3001\n\nThis function differs from ``file.replace`` in that it is able to search for\nkeys, followed by a customizable separator, and replace the value with the\ngiven value. Should the value be the same as the one already in the file, no\nchanges will be made.\n\nEither supply both ``key`` and ``value`` parameters, or supply a dictionary\nwith key / value pairs. It is an error to supply both.\n\nname\n    Name of the file to search/replace in.\n\nkey\n    Key to search for when ensuring a value. Use in combination with a\n    ``value`` parameter.\n\nvalue\n    Value to set for a given key. Use in combination with a ``key``\n    parameter.\n\nkey_values\n    Dictionary of key / value pairs to search for and ensure values for.\n    Used to specify multiple key / values at once.\n\nseparator : \"=\"\n    Separator which separates key from value.\n\nappend_if_not_found : False\n    Append the key/value to the end of the file if not found. Note that this\n    takes precedence over ``prepend_if_not_found``.\n\nprepend_if_not_found : False\n    Prepend the key/value to the beginning of the file if not found. Note\n    that ``append_if_not_found`` takes precedence.\n\nshow_changes : True\n    Show a diff of the resulting removals and inserts.\n\nignore_if_missing : False\n    Return with success even if the file is not found (or not readable).\n\ncount : 1\n    Number of occurrences to allow (and correct), default is 1. Set to -1 to\n    replace all, or set to 0 to remove all lines with this key regardsless\n    of its value.\n\nNote:\n    Any additional occurrences after ``count`` are removed.\n    A count of -1 will only replace all occurrences that are currently\n    uncommented already. Lines commented out will be left alone.\n\nuncomment : None\n    Disregard and remove supplied leading characters when finding keys. When\n    set to None, lines that are commented out are left for what they are.\n\nNote:\n    The argument to ``uncomment`` is not a prefix string. Rather; it is a\n    set of characters, each of which are stripped.\n\nkey_ignore_case : False\n    Keys are matched case insensitively. When a value is changed the matched\n    key is kept as-is.\n\nvalue_ignore_case : False\n    Values are checked case insensitively, trying to set e.g. 'Yes' while\n    the current value is 'yes', will not result in changes when\n    ``value_ignore_case`` is set to True.\n\nAn example of using ``file.keyvalue`` to ensure sshd does not allow\nfor root to login with a password and at the same time setting the\nlogin-gracetime to 1 minute and disabling all forwarding:\n\n    sshd_config_harden:\n        file.keyvalue:\n          - name: /etc/ssh/sshd_config\n          - key_values:\n              permitrootlogin: 'without-password'\n              LoginGraceTime: '1m'\n              DisableForwarding: 'yes'\n          - separator: ' '\n          - uncomment: '# '\n          - key_ignore_case: True\n          - append_if_not_found: True\n\nThe same example, except for only ensuring PermitRootLogin is set correctly.\nThus being able to use the shorthand ``key`` and ``value`` parameters\ninstead of ``key_values``.\n\n    sshd_config_harden:\n        file.keyvalue:\n          - name: /etc/ssh/sshd_config\n          - key: PermitRootLogin\n          - value: without-password\n          - separator: ' '\n          - uncomment: '# '\n          - key_ignore_case: True\n          - append_if_not_found: True\n\nNote:\n    Notice how the key is not matched case-sensitively, this way it will\n    correctly identify both 'PermitRootLogin' as well as 'permitrootlogin'.",
    "file.line": "Line-focused editing of a file.\n\nNew in version 2015.8.0\n\nNote:\n\n    ``file.line`` exists for historic reasons, and is not\n    generally recommended. It has a lot of quirks.  You may find\n    ``file.replace`` to be more suitable.\n\n``file.line`` is most useful if you have single lines in a file,\npotentially a config file, that you would like to manage. It can\nremove, add, and replace lines.\n\nname\n    Filesystem path to the file to be edited.\n\ncontent\n    Content of the line. Allowed to be empty if mode=delete.\n\nmatch\n    Match the target line for an action by\n    a fragment of a string or regular expression.\n\n    If neither ``before`` nor ``after`` are provided, and ``match``\n    is also ``None``, match falls back to the ``content`` value.\n\nmode\n    Defines how to edit a line. One of the following options is\n    required:\n\n    - ensure\n        If line does not exist, it will be added. If ``before``\n        and ``after`` are specified either zero lines, or lines\n        that contain the ``content`` line are allowed to be in between\n        ``before`` and ``after``. If there are lines, and none of\n        them match then it will produce an error.\n    - replace\n        If line already exists, it will be replaced.\n    - delete\n        Delete the line, if found.\n    - insert\n        Nearly identical to ``ensure``. If a line does not exist,\n        it will be added.\n\n        The differences are that multiple (and non-matching) lines are\n        alloweed between ``before`` and ``after``, if they are\n        specified. The line will always be inserted right before\n        ``before``. ``insert`` also allows the use of ``location`` to\n        specify that the line should be added at the beginning or end of\n        the file.\n\n    Note:\n\n        If ``mode=insert`` is used, at least one of the following\n        options must also be defined: ``location``, ``before``, or\n        ``after``. If ``location`` is used, it takes precedence\n        over the other two options.\n\nlocation\n    In ``mode=insert`` only, whether to place the ``content`` at the\n    beginning or end of a the file. If ``location`` is provided,\n    ``before`` and ``after`` are ignored. Valid locations:\n\n    - start\n        Place the content at the beginning of the file.\n    - end\n        Place the content at the end of the file.\n\nbefore\n    Regular expression or an exact case-sensitive fragment of the string.\n    Will be tried as **both** a regex **and** a part of the line.  Must\n    match **exactly** one line in the file.  This value is only used in\n    ``ensure`` and ``insert`` modes. The ``content`` will be inserted just\n    before this line, matching its ``indent`` unless ``indent=False``.\n\nafter\n    Regular expression or an exact case-sensitive fragment of the string.\n    Will be tried as **both** a regex **and** a part of the line.  Must\n    match **exactly** one line in the file.  This value is only used in\n    ``ensure`` and ``insert`` modes. The ``content`` will be inserted\n    directly after this line, unless ``before`` is also provided. If\n    ``before`` is not matched, indentation will match this line, unless\n    ``indent=False``.\n\nshow_changes\n    Output a unified diff of the old file and the new file.\n    If ``False`` return a boolean if any changes were made.\n    Default is ``True``\n\n    Note:\n        Using this option will store two copies of the file in-memory\n        (the original version and the edited version) in order to generate the diff.\n\nbackup\n    Create a backup of the original file with the extension:\n    \"Year-Month-Day-Hour-Minutes-Seconds\".\n\nquiet\n    Do not raise any exceptions. E.g. ignore the fact that the file that is\n    tried to be edited does not exist and nothing really happened.\n\nindent\n    Keep indentation with the previous line. This option is not considered when\n    the ``delete`` mode is specified. Default is ``True``.\n\ncreate\n    Create an empty file if doesn't exist.\n\n    New in version 2016.11.0\n\nuser\n    The user to own the file, this defaults to the user salt is running as\n    on the minion.\n\n    New in version 2016.11.0\n\ngroup\n    The group ownership set for the file, this defaults to the group salt\n    is running as on the minion On Windows, this is ignored.\n\n    New in version 2016.11.0\n\nfile_mode\n    The permissions to set on this file, aka 644, 0775, 4664. Not supported\n    on Windows.\n\n    New in version 2016.11.0\n\nIf an equal sign (``=``) appears in an argument to a Salt command, it is\ninterpreted as a keyword argument in the format of ``key=val``. That\nprocessing can be bypassed in order to pass an equal sign through to the\nremote shell command by manually specifying the kwarg:\n\n   update_config:\n     file.line:\n       - name: /etc/myconfig.conf\n       - mode: ensure\n       - content: my key = my value\n       - before: somekey.*?\n\n\n**Examples:**\n\nHere's a simple config file.\n\n    [some_config]\n    # Some config file\n    # this line will go away\n\n    here=False\n    away=True\n    goodybe=away\n\nAnd an sls file:\n\n    remove_lines:\n      file.line:\n        - name: /some/file.conf\n        - mode: delete\n        - match: away\n\nThis will produce:\n\n    [some_config]\n    # Some config file\n\n    here=False\n    away=True\n    goodbye=away\n\nIf that state is executed 2 more times, this will be the result:\n\n    [some_config]\n    # Some config file\n\n    here=False\n\nGiven that original file with this state:\n\n    replace_things:\n      file.line:\n        - name: /some/file.conf\n        - mode: replace\n        - match: away\n        - content: here\n\nThree passes will this state will result in this file:\n\n    [some_config]\n    # Some config file\n    here\n\n    here=False\n    here\n    here\n\nEach pass replacing the first line found.\n\nGiven this file:\n\n    insert after me\n    something\n    insert before me\n\nThe following state:\n\n    insert_a_line:\n      file.line:\n        - name: /some/file.txt\n        - mode: insert\n        - after: insert after me\n        - before: insert before me\n        - content: thrice\n\nIf this state is executed 3 times, the result will be:\n\n    insert after me\n    something\n    thrice\n    thrice\n    thrice\n    insert before me\n\nIf the mode is ensure instead, it will fail each time. To succeed, we need\nto remove the incorrect line between before and after:\n\n    insert after me\n    insert before me\n\nWith an ensure mode, this will insert ``thrice`` the first time and\nmake no changes for subsequent calls. For something simple this is\nfine, but if you have instead blocks like this:\n\n    Begin SomeBlock\n        foo = bar\n    End\n\n    Begin AnotherBlock\n        another = value\n    End\n\nAnd given this state:\n\n    ensure_someblock:\n      file.line:\n        - name: /some/file.conf\n        - mode: ensure\n        - after: Begin SomeBlock\n        - content: this = should be my content\n        - before: End\n\nThis will fail because there are multiple ``End`` lines. Without that\nproblem, it still would fail because there is a non-matching line,\n``foo = bar``. Ensure **only** allows either zero, or the matching\nline present to be present in between ``before`` and ``after``.",
    "file.managed": "Manage a given file, this function allows for a file to be downloaded from\nthe salt master and potentially run through a templating system.\n\nname\n    The location of the file to manage, as an absolute path.\n\nsource\n    The source file to download to the minion, this source file can be\n    hosted on either the salt master server (``salt://``), the salt minion\n    local file system (``/``), or on an HTTP or FTP server (``http(s)://``,\n    ``ftp://``).\n\n    Both HTTPS and HTTP are supported as well as downloading directly\n    from Amazon S3 compatible URLs with both pre-configured and automatic\n    IAM credentials. (see s3.get state documentation)\n    File retrieval from Openstack Swift object storage is supported via\n    swift://container/object_path URLs, see swift.get documentation.\n    For files hosted on the salt file server, if the file is located on\n    the master in the directory named spam, and is called eggs, the source\n    string is salt://spam/eggs. If source is left blank or None\n    (use ~ in YAML), the file will be created as an empty file and\n    the content will not be managed. This is also the case when a file\n    already exists and the source is undefined; the contents of the file\n    will not be changed or managed. If source is left blank or None, please\n    also set replaced to False to make your intention explicit.\n\n\n    If the file is hosted on a HTTP or FTP server then the source_hash\n    argument is also required.\n\n    A list of sources can also be passed in to provide a default source and\n    a set of fallbacks. The first source in the list that is found to exist\n    will be used and subsequent entries in the list will be ignored. Source\n    list functionality only supports local files and remote files hosted on\n    the salt master server or retrievable via HTTP, HTTPS, or FTP.\n\n        file_override_example:\n          file.managed:\n            - source:\n              - salt://file_that_does_not_exist\n              - salt://file_that_exists\n\nsource_hash\n    This can be one of the following:\n        1. a source hash string\n        2. the URI of a file that contains source hash strings\n\n    The function accepts the first encountered long unbroken alphanumeric\n    string of correct length as a valid hash, in order from most secure to\n    least secure:\n\n        Type    Length\n        ======  ======\n        sha512     128\n        sha384      96\n        sha256      64\n        sha224      56\n        sha1        40\n        md5         32\n\n    **Using a Source Hash File**\n        The file can contain several checksums for several files. Each line\n        must contain both the file name and the hash.  If no file name is\n        matched, the first hash encountered will be used, otherwise the most\n        secure hash with the correct source file name will be used.\n\n        When using a source hash file the source_hash argument needs to be a\n        url, the standard download urls are supported, ftp, http, salt etc:\n\n        Example:\n\n            tomdroid-src-0.7.3.tar.gz:\n              file.managed:\n                - name: /tmp/tomdroid-src-0.7.3.tar.gz\n                - source: https://launchpad.net/tomdroid/beta/0.7.3/+download/tomdroid-src-0.7.3.tar.gz\n                - source_hash: https://launchpad.net/tomdroid/beta/0.7.3/+download/tomdroid-src-0.7.3.hash\n\n        The following lines are all supported formats:\n\n            /etc/rc.conf ef6e82e4006dee563d98ada2a2a80a27\n            sha254c8525aee419eb649f0233be91c151178b30f0dff8ebbdcc8de71b1d5c8bcc06a  /etc/resolv.conf\n            ead48423703509d37c4a90e6a0d53e143b6fc268\n\n        Debian file type ``*.dsc`` files are also supported.\n\n    **Inserting the Source Hash in the SLS Data**\n\n    The source_hash can be specified as a simple checksum, like so:\n\n        tomdroid-src-0.7.3.tar.gz:\n          file.managed:\n            - name: /tmp/tomdroid-src-0.7.3.tar.gz\n            - source: https://launchpad.net/tomdroid/beta/0.7.3/+download/tomdroid-src-0.7.3.tar.gz\n            - source_hash: 79eef25f9b0b2c642c62b7f737d4f53f\n\n    Note:\n        Releases prior to 2016.11.0 must also include the hash type, like\n        in the below example:\n\n            tomdroid-src-0.7.3.tar.gz:\n              file.managed:\n                - name: /tmp/tomdroid-src-0.7.3.tar.gz\n                - source: https://launchpad.net/tomdroid/beta/0.7.3/+download/tomdroid-src-0.7.3.tar.gz\n                - source_hash: md5=79eef25f9b0b2c642c62b7f737d4f53f\n\n    Known issues:\n        If the remote server URL has the hash file as an apparent\n        sub-directory of the source file, the module will discover that it\n        has already cached a directory where a file should be cached. For\n        example:\n\n            tomdroid-src-0.7.3.tar.gz:\n              file.managed:\n                - name: /tmp/tomdroid-src-0.7.3.tar.gz\n                - source: https://launchpad.net/tomdroid/beta/0.7.3/+download/tomdroid-src-0.7.3.tar.gz\n                - source_hash: https://launchpad.net/tomdroid/beta/0.7.3/+download/tomdroid-src-0.7.3.tar.gz/+md5\n\nsource_hash_name\n    When ``source_hash`` refers to a hash file, Salt will try to find the\n    correct hash by matching the filename/URI associated with that hash. By\n    default, Salt will look for the filename being managed. When managing a\n    file at path ``/tmp/foo.txt``, then the following line in a hash file\n    would match:\n\n        acbd18db4cc2f85cedef654fccc4a4d8    foo.txt\n\n    However, sometimes a hash file will include multiple similar paths:\n\n        37b51d194a7513e45b56f6524f2d51f2    ./dir1/foo.txt\n        acbd18db4cc2f85cedef654fccc4a4d8    ./dir2/foo.txt\n        73feffa4b7f6bb68e44cf984c85f6e88    ./dir3/foo.txt\n\n    In cases like this, Salt may match the incorrect hash. This argument\n    can be used to tell Salt which filename to match, to ensure that the\n    correct hash is identified. For example:\n\n        /tmp/foo.txt:\n          file.managed:\n            - source: https://mydomain.tld/dir2/foo.txt\n            - source_hash: https://mydomain.tld/hashes\n            - source_hash_name: ./dir2/foo.txt\n\n    Note:\n        This argument must contain the full filename entry from the\n        checksum file, as this argument is meant to disambiguate matches\n        for multiple files that have the same basename. So, in the\n        example above, simply using ``foo.txt`` would not match.\n\n    New in version 2016.3.5\n\nkeep_source : True\n    Set to ``False`` to discard the cached copy of the source file once the\n    state completes. This can be useful for larger files to keep them from\n    taking up space in minion cache. However, keep in mind that discarding\n    the source file will result in the state needing to re-download the\n    source file if the state is run again.\n\n    New in version 2017.7.3\n\nuser\n    The user to own the file, this defaults to the user salt is running as\n    on the minion\n\ngroup\n    The group ownership set for the file, this defaults to the group salt\n    is running as on the minion. On Windows, this is ignored\n\nmode\n    The permissions to set on this file, e.g. ``644``, ``0775``, or\n    ``4664``.\n\n    The default mode for new files and directories corresponds to the\n    umask of the salt process. The mode of existing files and directories\n    will only be changed if ``mode`` is specified.\n\n    Note:\n        This option is **not** supported on Windows.\n\n    Changed in version 2016.11.0\n        This option can be set to ``keep``, and Salt will keep the mode\n        from the Salt fileserver. This is only supported when the\n        ``source`` URL begins with ``salt://``, or for files local to the\n        minion. Because the ``source`` option cannot be used with any of\n        the ``contents`` options, setting the ``mode`` to ``keep`` is also\n        incompatible with the ``contents`` options.\n\n    Note: keep does not work with salt-ssh.\n\n        As a consequence of how the files are transferred to the minion, and\n        the inability to connect back to the master with salt-ssh, salt is\n        unable to stat the file as it exists on the fileserver and thus\n        cannot mirror the mode on the salt-ssh minion\n\nattrs\n    The attributes to have on this file, e.g. ``a``, ``i``. The attributes\n    can be any or a combination of the following characters:\n    ``aAcCdDeijPsStTu``.\n\n    Note:\n        This option is **not** supported on Windows.\n\n    New in version 2018.3.0\n\ntemplate\n    If this setting is applied, the named templating engine will be used to\n    render the downloaded file. The following templates are supported:\n\n    - :mod:`cheetah<salt.renderers.cheetah>`\n    - :mod:`genshi<salt.renderers.genshi>`\n    - :mod:`jinja<salt.renderers.jinja>`\n    - :mod:`mako<salt.renderers.mako>`\n    - :mod:`py<salt.renderers.py>`\n    - :mod:`wempy<salt.renderers.wempy>`\n\nmakedirs : False\n    If set to ``True``, then the parent directories will be created to\n    facilitate the creation of the named file. If ``False``, and the parent\n    directory of the destination file doesn't exist, the state will fail.\n\ndir_mode\n    If directories are to be created, passing this option specifies the\n    permissions for those directories. If this is not set, directories\n    will be assigned permissions by adding the execute bit to the mode of\n    the files.\n\n    The default mode for new files and directories corresponds umask of salt\n    process. For existing files and directories it's not enforced.\n\nreplace : True\n    If set to ``False`` and the file already exists, the file will not be\n    modified even if changes would otherwise be made. Permissions and\n    ownership will still be enforced, however.\n\ncontext\n    Overrides default context variables passed to the template.\n\ndefaults\n    Default context passed to the template.\n\nbackup\n    Overrides the default backup mode for this specific file. See\n    :ref:`backup_mode documentation <file-state-backups>` for more details.\n\nshow_changes\n    Output a unified diff of the old file and the new file. If ``False``\n    return a boolean if any changes were made.\n\ncreate : True\n    If set to ``False``, then the file will only be managed if the file\n    already exists on the system.\n\ncontents\n    Specify the contents of the file. Cannot be used in combination with\n    ``source``. Ignores hashes and does not use a templating engine.\n\n    This value can be either a single string, a multiline YAML string or a\n    list of strings.  If a list of strings, then the strings will be joined\n    together with newlines in the resulting file. For example, the below\n    two example states would result in identical file contents:\n\n        /path/to/file1:\n          file.managed:\n            - contents:\n              - This is line 1\n              - This is line 2\n\n        /path/to/file2:\n          file.managed:\n            - contents: |\n                This is line 1\n                This is line 2\n\n\ncontents_pillar\n    New in version 0.17.0\n    Changed in version 2016.11.0\n        contents_pillar can also be a list, and the pillars will be\n        concatenated together to form one file.\n\n\n    Operates like ``contents``, but draws from a value stored in pillar,\n    using the pillar path syntax used in :mod:`pillar.get\n    <salt.modules.pillar.get>`. This is useful when the pillar value\n    contains newlines, as referencing a pillar variable using a jinja/mako\n    template can result in YAML formatting issues due to the newlines\n    causing indentation mismatches.\n\n    For example, the following could be used to deploy an SSH private key:\n\n        /home/deployer/.ssh/id_rsa:\n          file.managed:\n            - user: deployer\n            - group: deployer\n            - mode: 600\n            - attrs: a\n            - contents_pillar: userdata:deployer:id_rsa\n\n    This would populate ``/home/deployer/.ssh/id_rsa`` with the contents of\n    ``pillar['userdata']['deployer']['id_rsa']``. An example of this pillar\n    setup would be like so:\n\n        userdata:\n          deployer:\n            id_rsa: |\n                -----BEGIN RSA PRIVATE KEY-----\n                MIIEowIBAAKCAQEAoQiwO3JhBquPAalQF9qP1lLZNXVjYMIswrMe2HcWUVBgh+vY\n                U7sCwx/dH6+VvNwmCoqmNnP+8gTPKGl1vgAObJAnMT623dMXjVKwnEagZPRJIxDy\n                B/HaAre9euNiY3LvIzBTWRSeMfT+rWvIKVBpvwlgGrfgz70m0pqxu+UyFbAGLin+\n                GpxzZAMaFpZw4sSbIlRuissXZj/sHpQb8p9M5IeO4Z3rjkCP1cxI\n                -----END RSA PRIVATE KEY-----\n\n    Note:\n        The private key above is shortened to keep the example brief, but\n        shows how to do multiline string in YAML. The key is followed by a\n        pipe character, and the multiline string is indented two more\n        spaces.\n\n        To avoid the hassle of creating an indented multiline YAML string,\n        the :mod:`file_tree external pillar <salt.pillar.file_tree>` can\n        be used instead. However, this will not work for binary files in\n        Salt releases before 2015.8.4.\n\ncontents_grains\n    New in version 2014.7.0\n\n    Operates like ``contents``, but draws from a value stored in grains,\n    using the grains path syntax used in :mod:`grains.get\n    <salt.modules.grains.get>`. This functionality works similarly to\n    ``contents_pillar``, but with grains.\n\n    For example, the following could be used to deploy a \"message of the day\"\n    file:\n\n        write_motd:\n          file.managed:\n            - name: /etc/motd\n            - contents_grains: motd\n\n    This would populate ``/etc/motd`` file with the contents of the ``motd``\n    grain. The ``motd`` grain is not a default grain, and would need to be\n    set prior to running the state:\n\n        salt '*' grains.set motd 'Welcome! This system is managed by Salt.'\n\ncontents_newline : True\n    New in version 2014.7.0\n    Changed in version 2015.8.4\n        This option is now ignored if the contents being deployed contain\n        binary data.\n\n    If ``True``, files managed using ``contents``, ``contents_pillar``, or\n    ``contents_grains`` will have a newline added to the end of the file if\n    one is not present. Setting this option to ``False`` will ensure the\n    final line, or entry, does not contain a new line. If the last line, or\n    entry in the file does contain a new line already, this option will not\n    remove it.\n\ncontents_delimiter\n    New in version 2015.8.4\n\n    Can be used to specify an alternate delimiter for ``contents_pillar``\n    or ``contents_grains``. This delimiter will be passed through to\n    :py:func:`pillar.get <salt.modules.pillar.get>` or :py:func:`grains.get\n    <salt.modules.grains.get>` when retrieving the contents.\n\nencoding\n    If specified, then the specified encoding will be used. Otherwise, the\n    file will be encoded using the system locale (usually UTF-8). See\n    https://docs.python.org/3/library/codecs.html#standard-encodings for\n    the list of available encodings.\n\n    New in version 2017.7.0\n\nencoding_errors : 'strict'\n    Error encoding scheme. Default is ```'strict'```.\n    See https://docs.python.org/2/library/codecs.html#codec-base-classes\n    for the list of available schemes.\n\n    New in version 2017.7.0\n\nallow_empty : True\n    New in version 2015.8.4\n\n    If set to ``False``, then the state will fail if the contents specified\n    by ``contents_pillar`` or ``contents_grains`` are empty.\n\nfollow_symlinks : True\n    New in version 2014.7.0\n\n    If the desired path is a symlink follow it and make changes to the\n    file to which the symlink points.\n\ncheck_cmd\n    New in version 2014.7.0\n\n    The specified command will be run with an appended argument of a\n    *temporary* file containing the new managed contents.  If the command\n    exits with a zero status the new managed contents will be written to\n    the managed destination. If the command exits with a nonzero exit\n    code, the state will fail and no changes will be made to the file.\n\n    For example, the following could be used to verify sudoers before making\n    changes:\n\n        /etc/sudoers:\n          file.managed:\n            - user: root\n            - group: root\n            - mode: 0440\n            - attrs: i\n            - source: salt://sudoers/files/sudoers.jinja\n            - template: jinja\n            - check_cmd: /usr/sbin/visudo -c -f\n\n    **NOTE**: This ``check_cmd`` functions differently than the requisite\n    ``check_cmd``.\n\ntmp_dir\n    Directory for temp file created by ``check_cmd``. Useful for checkers\n    dependent on config file location (e.g. daemons restricted to their\n    own config directories by an apparmor profile).\n\n        /etc/dhcp/dhcpd.conf:\n          file.managed:\n            - user: root\n            - group: root\n            - mode: 0755\n            - tmp_dir: '/etc/dhcp'\n            - contents: \"# Managed by Salt\"\n            - check_cmd: dhcpd -t -cf\n\ntmp_ext\n    Suffix for temp file created by ``check_cmd``. Useful for checkers\n    dependent on config file extension (e.g. the init-checkconf upstart\n    config checker).\n\n        /etc/init/test.conf:\n          file.managed:\n            - user: root\n            - group: root\n            - mode: 0440\n            - tmp_ext: '.conf'\n            - contents:\n              - 'description \"Salt Minion\"'\n              - 'start on started mountall'\n              - 'stop on shutdown'\n              - 'respawn'\n              - 'exec salt-minion'\n            - check_cmd: init-checkconf -f\n\nskip_verify : False\n    If ``True``, hash verification of remote file sources (``http://``,\n    ``https://``, ``ftp://``) will be skipped, and the ``source_hash``\n    argument will be ignored.\n\n    New in version 2016.3.0\n\nselinux : None\n    Allows setting the selinux user, role, type, and range of a managed file\n\n        /tmp/selinux.test\n          file.managed:\n            - user: root\n            - selinux:\n                seuser: system_u\n                serole: object_r\n                setype: system_conf_t\n                seranage: s0\n\n    New in version Neon\n\nwin_owner : None\n    The owner of the directory. If this is not passed, user will be used. If\n    user is not passed, the account under which Salt is running will be\n    used.\n\n    New in version 2017.7.0\n\nwin_perms : None\n    A dictionary containing permissions to grant and their propagation. For\n    example: ``{'Administrators': {'perms': 'full_control'}}`` Can be a\n    single basic perm or a list of advanced perms. ``perms`` must be\n    specified. ``applies_to`` does not apply to file objects.\n\n    New in version 2017.7.0\n\nwin_deny_perms : None\n    A dictionary containing permissions to deny and their propagation. For\n    example: ``{'Administrators': {'perms': 'full_control'}}`` Can be a\n    single basic perm or a list of advanced perms. ``perms`` must be\n    specified. ``applies_to`` does not apply to file objects.\n\n    New in version 2017.7.0\n\nwin_inheritance : True\n    True to inherit permissions from the parent directory, False not to\n    inherit permission.\n\n    New in version 2017.7.0\n\nwin_perms_reset : False\n    If ``True`` the existing DACL will be cleared and replaced with the\n    settings defined in this function. If ``False``, new entries will be\n    appended to the existing DACL. Default is ``False``.\n\n    New in version 2018.3.0\n\nHere's an example using the above ``win_*`` parameters:\n\n    create_config_file:\n      file.managed:\n        - name: C:\\config\\settings.cfg\n        - source: salt://settings.cfg\n        - win_owner: Administrators\n        - win_perms:\n            # Basic Permissions\n            dev_ops:\n              perms: full_control\n            # List of advanced permissions\n            appuser:\n              perms:\n                - read_attributes\n                - read_ea\n                - create_folders\n                - read_permissions\n            joe_snuffy:\n              perms: read\n        - win_deny_perms:\n            fred_snuffy:\n              perms: full_control\n        - win_inheritance: False\n\nverify_ssl\n    If ``False``, remote https file sources (``https://``) and source_hash\n    will not attempt to validate the servers certificate. Default is True.\n\n    New in version 3002",
    "file.missing": "Verify that the named file or directory is missing, this returns True only\nif the named file is missing but does not remove the file if it is present.\n\nname\n    Absolute path which must NOT exist",
    "file.mknod": "Create a special file similar to the 'nix mknod command. The supported\ndevice types are ``p`` (fifo pipe), ``c`` (character device), and ``b``\n(block device). Provide the major and minor numbers when specifying a\ncharacter device or block device. A fifo pipe does not require this\ninformation. The command will create the necessary dirs if needed. If a\nfile of the same name not of the same type/major/minor exists, it will not\nbe overwritten or unlinked (deleted). This is logically in place as a\nsafety measure because you can really shoot yourself in the foot here and\nit is the behavior of 'nix ``mknod``. It is also important to note that not\njust anyone can create special devices. Usually this is only done as root.\nIf the state is executed as none other than root on a minion, you may\nreceive a permission error.\n\nname\n    name of the file\n\nntype\n    node type 'p' (fifo pipe), 'c' (character device), or 'b'\n    (block device)\n\nmajor\n    major number of the device\n    does not apply to a fifo pipe\n\nminor\n    minor number of the device\n    does not apply to a fifo pipe\n\nuser\n    owning user of the device/pipe\n\ngroup\n    owning group of the device/pipe\n\nmode\n    permissions on the device/pipe\n\nUsage:\n\n    /dev/chr:\n      file.mknod:\n        - ntype: c\n        - major: 180\n        - minor: 31\n        - user: root\n        - group: root\n        - mode: 660\n\n    /dev/blk:\n      file.mknod:\n        - ntype: b\n        - major: 8\n        - minor: 999\n        - user: root\n        - group: root\n        - mode: 660\n\n    /dev/fifo:\n      file.mknod:\n        - ntype: p\n        - user: root\n        - group: root\n        - mode: 660\n\nNew in version 0.17.0",
    "file.mod_run_check_cmd": "Execute the check_cmd logic.\n\nReturn a result dict if ``check_cmd`` succeeds (check_cmd == 0)\notherwise return True",
    "file.not_cached": "New in version 2017.7.3\n\nEnsures that a file is not present in the minion's cache, deleting it\nif found. This state is primarily invoked by other states to ensure\nthat a fresh copy is fetched.\n\nname\n    The URL of the file to be removed from cache. To remove a file from\n    cache in an environment other than ``base``, either use the ``saltenv``\n    argument or include the saltenv in the URL (e.g.\n    ``salt://path/to/file.conf?saltenv=dev``).\n\n    Note:\n        A list of URLs is not supported, this must be a single URL. If a\n        local file is passed here, the state will take no action.\n\nsaltenv\n    Used to specify the environment from which to download a file from the\n    Salt fileserver (i.e. those with ``salt://`` URL).",
    "file.patch": "Ensure that a patch has been applied to the specified file or directory\n\nChanged in version 2019.2.0\n    The ``hash`` and ``dry_run_first`` options are now ignored, as the\n    logic which determines whether or not the patch has already been\n    applied no longer requires them. Additionally, this state now supports\n    patch files that modify more than one file. To use these sort of\n    patches, specify a directory (and, if necessary, the ``strip`` option)\n    instead of a file.\n\nNote:\n    A suitable ``patch`` executable must be available on the minion. Also,\n    keep in mind that the pre-check this state does to determine whether or\n    not changes need to be made will create a temp file and send all patch\n    output to that file. This means that, in the event that the patch would\n    not have applied cleanly, the comment included in the state results will\n    reference a temp file that will no longer exist once the state finishes\n    running.\n\nname\n    The file or directory to which the patch should be applied\n\nsource\n    The patch file to apply\n\n    Changed in version 2019.2.0\n        The source can now be from any file source supported by Salt\n        (``salt://``, ``http://``, ``https://``, ``ftp://``, etc.).\n        Templating is also now supported.\n\nsource_hash\n    Works the same way as in :py:func:`file.managed\n    <salt.states.file.managed>`.\n\n    New in version 2019.2.0\n\nsource_hash_name\n    Works the same way as in :py:func:`file.managed\n    <salt.states.file.managed>`\n\n    New in version 2019.2.0\n\nskip_verify\n    Works the same way as in :py:func:`file.managed\n    <salt.states.file.managed>`\n\n    New in version 2019.2.0\n\ntemplate\n    Works the same way as in :py:func:`file.managed\n    <salt.states.file.managed>`\n\n    New in version 2019.2.0\n\ncontext\n    Works the same way as in :py:func:`file.managed\n    <salt.states.file.managed>`\n\n    New in version 2019.2.0\n\ndefaults\n    Works the same way as in :py:func:`file.managed\n    <salt.states.file.managed>`\n\n    New in version 2019.2.0\n\noptions\n    Extra options to pass to patch. This should not be necessary in most\n    cases.\n\n    Note:\n        For best results, short opts should be separate from one another.\n        The ``-N`` and ``-r``, and ``-o`` options are used internally by\n        this state and cannot be used here. Additionally, instead of using\n        ``-pN`` or ``--strip=N``, use the ``strip`` option documented\n        below.\n\nreject_file\n    If specified, any rejected hunks will be written to this file. If not\n    specified, then they will be written to a temp file which will be\n    deleted when the state finishes running.\n\n    .. important::\n        The parent directory must exist. Also, this will overwrite the file\n        if it is already present.\n\n    New in version 2019.2.0\n\nstrip\n    Number of directories to strip from paths in the patch file. For\n    example, using the below SLS would instruct Salt to use ``-p1`` when\n    applying the patch:\n\n        /etc/myfile.conf:\n          file.patch:\n            - source: salt://myfile.patch\n            - strip: 1\n\n    New in version 2019.2.0\n        In previous versions, ``-p1`` would need to be passed as part of\n        the ``options`` value.\n\nsaltenv\n    Specify the environment from which to retrieve the patch file indicated\n    by the ``source`` parameter. If not provided, this defaults to the\n    environment from which the state is being executed.\n\n    Note:\n        Ignored when the patch file is from a non-``salt://`` source.\n\n**Usage:**\n\n    # Equivalent to ``patch --forward /opt/myfile.txt myfile.patch``\n    /opt/myfile.txt:\n      file.patch:\n        - source: salt://myfile.patch",
    "file.prepend": 'Ensure that some text appears at the beginning of a file\n\nThe text will not be prepended again if it already exists in the file. You\nmay specify a single line of text or a list of lines to append.\n\nname\n    The location of the file to append to.\n\ntext\n    The text to be appended, which can be a single string or a list\n    of strings.\n\nmakedirs\n    If the file is located in a path without a parent directory,\n    then the state will fail. If makedirs is set to True, then\n    the parent directories will be created to facilitate the\n    creation of the named file. Defaults to False.\n\nsource\n    A single source file to append. This source file can be hosted on either\n    the salt master server, or on an HTTP or FTP server. Both HTTPS and\n    HTTP are supported as well as downloading directly from Amazon S3\n    compatible URLs with both pre-configured and automatic IAM credentials\n    (see s3.get state documentation). File retrieval from Openstack Swift\n    object storage is supported via swift://container/object_path URLs\n    (see swift.get documentation).\n\n    For files hosted on the salt file server, if the file is located on\n    the master in the directory named spam, and is called eggs, the source\n    string is salt://spam/eggs.\n\n    If the file is hosted on an HTTP or FTP server, the source_hash argument\n    is also required.\n\nsource_hash\n    This can be one of the following:\n        1. a source hash string\n        2. the URI of a file that contains source hash strings\n\n    The function accepts the first encountered long unbroken alphanumeric\n    string of correct length as a valid hash, in order from most secure to\n    least secure:\n\n        Type    Length\n        ======  ======\n        sha512     128\n        sha384      96\n        sha256      64\n        sha224      56\n        sha1        40\n        md5         32\n\n    See the ``source_hash`` parameter description for :mod:`file.managed\n    <salt.states.file.managed>` function for more details and examples.\n\ntemplate\n    The named templating engine will be used to render the appended-to file.\n    Defaults to ``jinja``. The following templates are supported:\n\n    - :mod:`cheetah<salt.renderers.cheetah>`\n    - :mod:`genshi<salt.renderers.genshi>`\n    - :mod:`jinja<salt.renderers.jinja>`\n    - :mod:`mako<salt.renderers.mako>`\n    - :mod:`py<salt.renderers.py>`\n    - :mod:`wempy<salt.renderers.wempy>`\n\nsources\n    A list of source files to append. If the files are hosted on an HTTP or\n    FTP server, the source_hashes argument is also required.\n\nsource_hashes\n    A list of source_hashes corresponding to the sources list specified in\n    the sources argument.\n\ndefaults\n    Default context passed to the template.\n\ncontext\n    Overrides default context variables passed to the template.\n\nignore_whitespace\n    New in version 2015.8.4\n\n    Spaces and Tabs in text are ignored by default, when searching for the\n    appending content, one space or multiple tabs are the same for salt.\n    Set this option to ``False`` if you want to change this behavior.\n\nMulti-line example:\n\n    /etc/motd:\n      file.prepend:\n        - text: |\n            Thou hadst better eat salt with the Philosophers of Greece,\n            than sugar with the Courtiers of Italy.\n            - Benjamin Franklin\n\nMultiple lines of text:\n\n    /etc/motd:\n      file.prepend:\n        - text:\n          - Trust no one unless you have eaten much salt with him.\n          - "Salt is born of the purest of parents: the sun and the sea."\n\nOptionally, require the text to appear exactly as specified\n(order and position). Combine with multi-line or multiple lines of input.\n\n    /etc/motd:\n      file.prepend:\n        - header: True\n        - text:\n          - This will be the very first line in the file.\n          - The 2nd line, regardless of duplicates elsewhere in the file.\n          - These will be written anew if they do not appear verbatim.\n\nGather text from multiple template files:\n\n    /etc/motd:\n      file:\n        - prepend\n        - template: jinja\n        - sources:\n          - salt://motd/devops-messages.tmpl\n          - salt://motd/hr-messages.tmpl\n          - salt://motd/general-messages.tmpl\n\nNew in version 2014.7.0',
    "file.recurse": "Recurse through a subdirectory on the master and copy said subdirectory\nover to the specified path.\n\nname\n    The directory to set the recursion in\n\nsource\n    The source directory, this directory is located on the salt master file\n    server and is specified with the salt:// protocol. If the directory is\n    located on the master in the directory named spam, and is called eggs,\n    the source string is salt://spam/eggs\n\nkeep_source : True\n    Set to ``False`` to discard the cached copy of the source file once the\n    state completes. This can be useful for larger files to keep them from\n    taking up space in minion cache. However, keep in mind that discarding\n    the source file will result in the state needing to re-download the\n    source file if the state is run again.\n\n    New in version 2017.7.3\n\nclean\n    Make sure that only files that are set up by salt and required by this\n    function are kept. If this option is set then everything in this\n    directory will be deleted unless it is required.\n\nrequire\n    Require other resources such as packages or files\n\nuser\n    The user to own the directory. This defaults to the user salt is\n    running as on the minion\n\ngroup\n    The group ownership set for the directory. This defaults to the group\n    salt is running as on the minion. On Windows, this is ignored\n\ndir_mode\n    The permissions mode to set on any directories created.\n\n    The default mode for new files and directories corresponds umask of salt\n    process. For existing files and directories it's not enforced.\n\n    Note:\n        This option is **not** supported on Windows.\n\nfile_mode\n    The permissions mode to set on any files created.\n\n    The default mode for new files and directories corresponds umask of salt\n    process. For existing files and directories it's not enforced.\n\n    Note:\n        This option is **not** supported on Windows.\n\n    Changed in version 2016.11.0\n        This option can be set to ``keep``, and Salt will keep the mode\n        from the Salt fileserver. This is only supported when the\n        ``source`` URL begins with ``salt://``, or for files local to the\n        minion. Because the ``source`` option cannot be used with any of\n        the ``contents`` options, setting the ``mode`` to ``keep`` is also\n        incompatible with the ``contents`` options.\n\nsym_mode\n    The permissions mode to set on any symlink created.\n\n    The default mode for new files and directories corresponds umask of salt\n    process. For existing files and directories it's not enforced.\n\n    Note:\n        This option is **not** supported on Windows.\n\ntemplate\n    If this setting is applied, the named templating engine will be used to\n    render the downloaded file. The following templates are supported:\n\n    - :mod:`cheetah<salt.renderers.cheetah>`\n    - :mod:`genshi<salt.renderers.genshi>`\n    - :mod:`jinja<salt.renderers.jinja>`\n    - :mod:`mako<salt.renderers.mako>`\n    - :mod:`py<salt.renderers.py>`\n    - :mod:`wempy<salt.renderers.wempy>`\n\n    Note:\n\n        The template option is required when recursively applying templates.\n\nreplace : True\n    If set to ``False`` and the file already exists, the file will not be\n    modified even if changes would otherwise be made. Permissions and\n    ownership will still be enforced, however.\n\ncontext\n    Overrides default context variables passed to the template.\n\ndefaults\n    Default context passed to the template.\n\ninclude_empty\n    Set this to True if empty directories should also be created\n    (default is False)\n\nbackup\n    Overrides the default backup mode for all replaced files. See\n    :ref:`backup_mode documentation <file-state-backups>` for more details.\n\ninclude_pat\n    When copying, include only this pattern, or list of patterns, from the\n    source. Default is glob match; if prefixed with 'E@', then regexp match.\n    Example:\n\n      - include_pat: hello*       :: glob matches 'hello01', 'hello02'\n                                     ... but not 'otherhello'\n      - include_pat: E@hello      :: regexp matches 'otherhello',\n                                     'hello01' ...\n\n    Changed in version 3001\n\n        List patterns are now supported\n\n        - include_pat:\n            - hello01\n            - hello02\n\nexclude_pat\n    Exclude this pattern, or list of patterns, from the source when copying.\n    If both `include_pat` and `exclude_pat` are supplied, then it will apply\n    conditions cumulatively. i.e. first select based on include_pat, and\n    then within that result apply exclude_pat.\n\n    Also, when 'clean=True', exclude this pattern from the removal\n    list and preserve in the destination.\n    Example:\n\n      - exclude_pat: APPDATA*               :: glob matches APPDATA.01,\n                                               APPDATA.02,.. for exclusion\n      - exclude_pat: E@(APPDATA)|(TEMPDATA) :: regexp matches APPDATA\n                                               or TEMPDATA for exclusion\n\n    Changed in version 3001\n\n        List patterns are now supported\n\n        - exclude_pat:\n            - APPDATA.01\n            - APPDATA.02\n\nmaxdepth\n    When copying, only copy paths which are of depth `maxdepth` from the\n    source path.\n    Example:\n\n      - maxdepth: 0      :: Only include files located in the source\n                            directory\n      - maxdepth: 1      :: Only include files located in the source\n                            or immediate subdirectories\n\nkeep_symlinks\n    Keep symlinks when copying from the source. This option will cause\n    the copy operation to terminate at the symlink. If desire behavior\n    similar to rsync, then set this to True.\n\nforce_symlinks\n    Force symlink creation. This option will force the symlink creation.\n    If a file or directory is obstructing symlink creation it will be\n    recursively removed so that symlink creation can proceed. This\n    option is usually not needed except in special circumstances.\n\nwin_owner : None\n    The owner of the symlink and directories if ``makedirs`` is True. If\n    this is not passed, ``user`` will be used. If ``user`` is not passed,\n    the account under which Salt is running will be used.\n\n    New in version 2017.7.7\n\nwin_perms : None\n    A dictionary containing permissions to grant\n\n    New in version 2017.7.7\n\nwin_deny_perms : None\n    A dictionary containing permissions to deny\n\n    New in version 2017.7.7\n\nwin_inheritance : None\n    True to inherit permissions from parent, otherwise False\n\n    New in version 2017.7.7",
    "file.rename": 'If the source file exists on the system, rename it to the named file. The\nnamed file will not be overwritten if it already exists unless the force\noption is set to True.\n\nname\n    The location of the file to rename to\n\nsource\n    The location of the file to move to the location specified with name\n\nforce\n    If the target location is present then the file will not be moved,\n    specify "force: True" to overwrite the target file\n\nmakedirs\n    If the target subdirectories don\'t exist create them',
    "file.replace": "Maintain an edit in a file.\n\nNew in version 0.17.0\n\nname\n    Filesystem path to the file to be edited. If a symlink is specified, it\n    will be resolved to its target.\n\npattern\n    A regular expression, to be matched using Python's\n    :py:func:`re.search`.\n\n    Note:\n\n        If you need to match a literal string that contains regex special\n        characters, you may want to use salt's custom Jinja filter,\n        ``regex_escape``.\n\n            {{ 'http://example.com?foo=bar%20baz' | regex_escape }}\n\nrepl\n    The replacement text\n\ncount\n    Maximum number of pattern occurrences to be replaced.  Defaults to 0.\n    If count is a positive integer n, no more than n occurrences will be\n    replaced, otherwise all occurrences will be replaced.\n\nflags\n    A list of flags defined in the ``re`` module documentation from the\n    Python standard library. Each list item should be a string that will\n    correlate to the human-friendly flag name. E.g., ``['IGNORECASE',\n    'MULTILINE']``.  Optionally, ``flags`` may be an int, with a value\n    corresponding to the XOR (``|``) of all the desired flags. Defaults to\n    ``8`` (which equates to ``['MULTILINE']``).\n\n    Note:\n\n        ``file.replace`` reads the entire file as a string to support\n        multiline regex patterns. Therefore, when using anchors such as\n        ``^`` or ``$`` in the pattern, those anchors may be relative to\n        the line OR relative to the file. The default for ``file.replace``\n        is to treat anchors as relative to the line, which is implemented\n        by setting the default value of ``flags`` to ``['MULTILINE']``.\n        When overriding the default value for ``flags``, if\n        ``'MULTILINE'`` is not present then anchors will be relative to\n        the file. If the desired behavior is for anchors to be relative to\n        the line, then simply add ``'MULTILINE'`` to the list of flags.\n\nbufsize\n    How much of the file to buffer into memory at once. The default value\n    ``1`` processes one line at a time. The special value ``file`` may be\n    specified which will read the entire file into memory before\n    processing.\n\nappend_if_not_found : False\n    If set to ``True``, and pattern is not found, then the content will be\n    appended to the file.\n\n    New in version 2014.7.0\n\nprepend_if_not_found : False\n    If set to ``True`` and pattern is not found, then the content will be\n    prepended to the file.\n\n    New in version 2014.7.0\n\nnot_found_content\n    Content to use for append/prepend if not found. If ``None`` (default),\n    uses ``repl``. Useful when ``repl`` uses references to group in\n    pattern.\n\n    New in version 2014.7.0\n\nbackup\n    The file extension to use for a backup of the file before editing. Set\n    to ``False`` to skip making a backup.\n\nshow_changes : True\n    Output a unified diff of the old file and the new file. If ``False``\n    return a boolean if any changes were made. Returns a boolean or a\n    string.\n\n    .. note:\n        Using this option will store two copies of the file in memory (the\n        original version and the edited version) in order to generate the\n        diff. This may not normally be a concern, but could impact\n        performance if used with large files.\n\nignore_if_missing : False\n    New in version 2016.3.4\n\n    Controls what to do if the file is missing. If set to ``False``, the\n    state will display an error raised by the execution module. If set to\n    ``True``, the state will simply report no changes.\n\nbackslash_literal : False\n    New in version 2016.11.7\n\n    Interpret backslashes as literal backslashes for the repl and not\n    escape characters.  This will help when using append/prepend so that\n    the backslashes are not interpreted for the repl on the second run of\n    the state.\n\nFor complex regex patterns, it can be useful to avoid the need for complex\nquoting and escape sequences by making use of YAML's multiline string\nsyntax.\n\n    complex_search_and_replace:\n      file.replace:\n        # <...snip...>\n        - pattern: |\n            CentOS \\(2.6.32[^\\\\n]+\\\\n\\s+root[^\\\\n]+\\\\n\\)+\n\nNote:\n\n   When using YAML multiline string syntax in ``pattern:``, make sure to\n   also use that syntax in the ``repl:`` part, or you might loose line\n   feeds.\n\nWhen regex capture groups are used in ``pattern:``, their captured value is\navailable for reuse in the ``repl:`` part as a backreference (ex. ``\\1``).\n\n    add_login_group_to_winbind_ssh_access_list:\n      file.replace:\n        - name: '/etc/security/pam_winbind.conf'\n        - pattern: '^(require_membership_of = )(.*)$'\n        - repl: '\\1\\2,append-new-group-to-line'\n\nNote:\n\n   The ``file.replace`` state uses Python's ``re`` module.\n   For more advanced options, see https://docs.python.org/2/library/re.html",
    "file.retention_schedule": "Apply retention scheduling to backup storage directory.\n\nNew in version 2016.11.0\n\n:param name:\n    The filesystem path to the directory containing backups to be managed.\n\n:param retain:\n    Delete the backups, except for the ones we want to keep.\n    The N below should be an integer but may also be the special value of ``all``,\n    which keeps all files matching the criteria.\n    All of the retain options default to None,\n    which means to not keep files based on this criteria.\n\n    :most_recent N:\n        Keep the most recent N files.\n\n    :first_of_hour N:\n        For the last N hours from now, keep the first file after the hour.\n\n    :first_of_day N:\n        For the last N days from now, keep the first file after midnight.\n        See also ``timezone``.\n\n    :first_of_week N:\n        For the last N weeks from now, keep the first file after Sunday midnight.\n\n    :first_of_month N:\n        For the last N months from now, keep the first file after the start of the month.\n\n    :first_of_year N:\n        For the last N years from now, keep the first file after the start of the year.\n\n:param strptime_format:\n    A python strptime format string used to first match the filenames of backups\n    and then parse the filename to determine the datetime of the file.\n    https://docs.python.org/2/library/datetime.html#datetime.datetime.strptime\n    Defaults to None, which considers all files in the directory to be backups eligible for deletion\n    and uses ``os.path.getmtime()`` to determine the datetime.\n\n:param timezone:\n    The timezone to use when determining midnight.\n    This is only used when datetime is pulled from ``os.path.getmtime()``.\n    Defaults to ``None`` which uses the timezone from the locale.\n\nUsage example:\n\n    /var/backups/example_directory:\n      file.retention_schedule:\n        - retain:\n            most_recent: 5\n            first_of_hour: 4\n            first_of_day: 7\n            first_of_week: 6    # NotImplemented yet.\n            first_of_month: 6\n            first_of_year: all\n        - strptime_format: example_name_%Y%m%dT%H%M%S.tar.bz2\n        - timezone: None",
    "file.serialize": 'Serializes dataset and store it into managed file. Useful for sharing\nsimple configuration files.\n\nname\n    The location of the file to create\n\ndataset\n    The dataset that will be serialized\n\ndataset_pillar\n    Operates like ``dataset``, but draws from a value stored in pillar,\n    using the pillar path syntax used in :mod:`pillar.get\n    <salt.modules.pillar.get>`. This is useful when the pillar value\n    contains newlines, as referencing a pillar variable using a jinja/mako\n    template can result in YAML formatting issues due to the newlines\n    causing indentation mismatches.\n\n    New in version 2015.8.0\n\nserializer (or formatter)\n    Write the data as this format. See the list of\n    :ref:`all-salt.serializers` for supported output formats.\n\n    Changed in version 3002\n        ``serializer`` argument added as an alternative to ``formatter``.\n        Both are accepted, but using both will result in an error.\n\nencoding\n    If specified, then the specified encoding will be used. Otherwise, the\n    file will be encoded using the system locale (usually UTF-8). See\n    https://docs.python.org/3/library/codecs.html#standard-encodings for\n    the list of available encodings.\n\n    New in version 2017.7.0\n\nencoding_errors : \'strict\'\n    Error encoding scheme. Default is ```\'strict\'```.\n    See https://docs.python.org/2/library/codecs.html#codec-base-classes\n    for the list of available schemes.\n\n    New in version 2017.7.0\n\nuser\n    The user to own the directory, this defaults to the user salt is\n    running as on the minion\n\ngroup\n    The group ownership set for the directory, this defaults to the group\n    salt is running as on the minion\n\nmode\n    The permissions to set on this file, e.g. ``644``, ``0775``, or\n    ``4664``.\n\n    The default mode for new files and directories corresponds umask of salt\n    process. For existing files and directories it\'s not enforced.\n\n    Note:\n        This option is **not** supported on Windows.\n\nbackup\n    Overrides the default backup mode for this specific file.\n\nmakedirs\n    Create parent directories for destination file.\n\n    New in version 2014.1.3\n\nshow_changes\n    Output a unified diff of the old file and the new file. If ``False``\n    return a boolean if any changes were made.\n\ncreate\n    Default is True, if create is set to False then the file will only be\n    managed if the file already exists on the system.\n\nmerge_if_exists\n    Default is False, if merge_if_exists is True then the existing file will\n    be parsed and the dataset passed in will be merged with the existing\n    content\n\n    New in version 2014.7.0\n\nserializer_opts\n    Pass through options to serializer. For example:\n\n       /etc/dummy/package.yaml\n         file.serialize:\n           - serializer: yaml\n           - serializer_opts:\n             - explicit_start: True\n             - default_flow_style: True\n             - indent: 4\n\n    The valid opts are the additional opts (i.e. not the data being\n    serialized) for the function used to serialize the data. Documentation\n    for the these functions can be found in the list below:\n\n    - For **yaml**: `yaml.dump()`_\n    - For **json**: `json.dumps()`_\n    - For **python**: `pprint.pformat()`_\n    - For **msgpack**: Run ``python -c \'import msgpack; help(msgpack.Packer)\'``\n      to see the available options (``encoding``, ``unicode_errors``, etc.)\n\n    .. _`yaml.dump()`: https://pyyaml.org/wiki/PyYAMLDocumentation\n    .. _`json.dumps()`: https://docs.python.org/2/library/json.html#json.dumps\n    .. _`pprint.pformat()`: https://docs.python.org/2/library/pprint.html#pprint.pformat\n\ndeserializer_opts\n    Like ``serializer_opts`` above, but only used when merging with an\n    existing file (i.e. when ``merge_if_exists`` is set to ``True``).\n\n    The options specified here will be passed to the deserializer to load\n    the existing data, before merging with the specified data and\n    re-serializing.\n\n       /etc/dummy/package.yaml\n         file.serialize:\n           - serializer: yaml\n           - serializer_opts:\n             - explicit_start: True\n             - default_flow_style: True\n             - indent: 4\n           - deserializer_opts:\n             - encoding: latin-1\n           - merge_if_exists: True\n\n    The valid opts are the additional opts (i.e. not the data being\n    deserialized) for the function used to deserialize the data.\n    Documentation for the these functions can be found in the list below:\n\n    - For **yaml**: `yaml.load()`_\n    - For **json**: `json.loads()`_\n\n    .. _`yaml.load()`: https://pyyaml.org/wiki/PyYAMLDocumentation\n    .. _`json.loads()`: https://docs.python.org/2/library/json.html#json.loads\n\n    However, note that not all arguments are supported. For example, when\n    deserializing JSON, arguments like ``parse_float`` and ``parse_int``\n    which accept a callable object cannot be handled in an SLS file.\n\n    New in version 2019.2.0\n\nFor example, this state:\n\n    /etc/dummy/package.json:\n      file.serialize:\n        - dataset:\n            name: naive\n            description: A package using naive versioning\n            author: A confused individual <iam@confused.com>\n            dependencies:\n              express: \'>= 1.2.0\'\n              optimist: \'>= 0.1.0\'\n            engine: node 0.4.1\n        - serializer: json\n\nwill manage the file ``/etc/dummy/package.json``:\n\n    {\n      "author": "A confused individual <iam@confused.com>",\n      "dependencies": {\n        "express": ">= 1.2.0",\n        "optimist": ">= 0.1.0"\n      },\n      "description": "A package using naive versioning",\n      "engine": "node 0.4.1",\n      "name": "naive"\n    }',
    "file.shortcut": 'Create a Windows shortcut\n\nIf the file already exists and is a shortcut pointing to any location other\nthan the specified target, the shortcut will be replaced. If it is\na regular file or directory then the state will return False. If the\nregular file or directory is desired to be replaced with a shortcut pass\nforce: True, if it is to be renamed, pass a backupname.\n\nname\n    The location of the shortcut to create. Must end with either\n    ".lnk" or ".url"\n\ntarget\n    The location that the shortcut points to\n\narguments\n    Any arguments to pass in the shortcut\n\nworking_dir\n    Working directory in which to execute target\n\ndescription\n    Description to set on shortcut\n\nicon_location\n    Location of shortcut\'s icon\n\nforce\n    If the name of the shortcut exists and is not a file and\n    force is set to False, the state will fail. If force is set to\n    True, the link or directory in the way of the shortcut file\n    will be deleted to make room for the shortcut, unless\n    backupname is set, when it will be renamed\n\nbackupname\n    If the name of the shortcut exists and is not a file, it will be\n    renamed to the backupname. If the backupname already\n    exists and force is False, the state will fail. Otherwise, the\n    backupname will be removed first.\n\nmakedirs\n    If the location of the shortcut does not already have a parent\n    directory then the state will fail, setting makedirs to True will\n    allow Salt to create the parent directory. Setting this to True will\n    also create the parent for backupname if necessary.\n\nuser\n    The user to own the file, this defaults to the user salt is running as\n    on the minion\n\n    The default mode for new files and directories corresponds umask of salt\n    process. For existing files and directories it\'s not enforced.',
    "file.symlink": "Create a symbolic link (symlink, soft link)\n\nIf the file already exists and is a symlink pointing to any location other\nthan the specified target, the symlink will be replaced. If an entry with\nthe same name exists then the state will return False. If the existing\nentry is desired to be replaced with a symlink pass force: True, if it is\nto be renamed, pass a backupname.\n\nname\n    The location of the symlink to create\n\ntarget\n    The location that the symlink points to\n\nforce\n    If the name of the symlink exists and is not a symlink and\n    force is set to False, the state will fail. If force is set to\n    True, the existing entry in the way of the symlink file\n    will be deleted to make room for the symlink, unless\n    backupname is set, when it will be renamed\n\n    Changed in version Neon\n        Force will now remove all types of existing file system entries,\n        not just files, directories and symlinks.\n\nbackupname\n    If the name of the symlink exists and is not a symlink, it will be\n    renamed to the backupname. If the backupname already\n    exists and force is False, the state will fail. Otherwise, the\n    backupname will be removed first.\n    An absolute path OR a basename file/directory name must be provided.\n    The latter will be placed relative to the symlink destination's parent\n    directory.\n\nmakedirs\n    If the location of the symlink does not already have a parent directory\n    then the state will fail, setting makedirs to True will allow Salt to\n    create the parent directory\n\nuser\n    The user to own the file, this defaults to the user salt is running as\n    on the minion\n\ngroup\n    The group ownership set for the file, this defaults to the group salt\n    is running as on the minion. On Windows, this is ignored\n\nmode\n    The permissions to set on this file, aka 644, 0775, 4664. Not supported\n    on Windows.\n\n    The default mode for new files and directories corresponds umask of salt\n    process. For existing files and directories it's not enforced.\n\nwin_owner : None\n    The owner of the symlink and directories if ``makedirs`` is True. If\n    this is not passed, ``user`` will be used. If ``user`` is not passed,\n    the account under which Salt is running will be used.\n\n    New in version 2017.7.7\n\nwin_perms : None\n    A dictionary containing permissions to grant\n\n    New in version 2017.7.7\n\nwin_deny_perms : None\n    A dictionary containing permissions to deny\n\n    New in version 2017.7.7\n\nwin_inheritance : None\n    True to inherit permissions from parent, otherwise False\n\n    New in version 2017.7.7",
    "file.tidied": "Remove unwanted files based on specific criteria. Multiple criteria\nare OR’d together, so a file that is too large but is not old enough\nwill still get tidied.\n\nIf neither age nor size is given all files which match a pattern in\nmatches will be removed.\n\nname\n    The directory tree that should be tidied\n\nage\n    Maximum age in days after which files are considered for removal\n\nmatches\n    List of regular expressions to restrict what gets removed.  Default: ['.*']\n\nrmdirs\n    Whether or not it's allowed to remove directories\n\nsize\n    Maximum allowed file size. Files greater or equal to this size are\n    removed. Doesn't apply to directories or symbolic links\n\n    cleanup:\n      file.tidied:\n        - name: /tmp/salt_test\n        - rmdirs: True\n        - matches:\n          - foo\n          - b.*r",
    "file.touch": "Replicate the 'nix \"touch\" command to create a new empty\nfile or update the atime and mtime of an existing file.\n\nNote that if you just want to create a file and don't care about atime or\nmtime, you should use ``file.managed`` instead, as it is more\nfeature-complete.  (Just leave out the ``source``/``template``/``contents``\narguments, and it will just create the file and/or check its permissions,\nwithout messing with contents)\n\nname\n    name of the file\n\natime\n    atime of the file\n\nmtime\n    mtime of the file\n\nmakedirs\n    whether we should create the parent directory/directories in order to\n    touch the file\n\nUsage:\n\n    /var/log/httpd/logrotate.empty:\n      file.touch\n\nNew in version 0.9.5",
    "file.uncomment": "Uncomment specified commented lines in a file\n\nname\n    The full path to the file to be edited\nregex\n    A regular expression used to find the lines that are to be uncommented.\n    This regex should not include the comment character. A leading ``^``\n    character will be stripped for convenience (for easily switching\n    between comment() and uncomment()).  The regex will be searched for\n    from the beginning of the line, ignoring leading spaces (we prepend\n    '^[ \\t]*')\nchar : ``#``\n    The character to remove in order to uncomment a line\nbackup : ``.bak``\n    The file will be backed up before edit with this file extension;\n\n    Warning:\n\n        This backup will be overwritten each time ``sed`` / ``comment`` /\n        ``uncomment`` is called. Meaning the backup will only be useful\n        after the first invocation.\n\n    Set to False/None to not keep a backup.\n\nUsage:\n\n    /etc/adduser.conf:\n      file.uncomment:\n        - regex: EXTRA_GROUPS\n\nNew in version 0.9.5",
}

FILE_NAME_COMPLETER = {
    "file": StateNameCompletion(
        "file",
        [
            {
                "hardlink": {
                    "name": None,
                    "target": None,
                    "force": False,
                    "makedirs": False,
                    "user": None,
                    "group": None,
                    "dir_mode": None,
                    "kwargs": "kwargs",
                }
            },
            {
                "symlink": {
                    "name": None,
                    "target": None,
                    "force": False,
                    "backupname": None,
                    "makedirs": False,
                    "user": None,
                    "group": None,
                    "mode": None,
                    "win_owner": None,
                    "win_perms": None,
                    "win_deny_perms": None,
                    "win_inheritance": None,
                    "kwargs": "kwargs",
                }
            },
            {"absent": {"name": None, "kwargs": "kwargs"}},
            {
                "tidied": {
                    "name": None,
                    "age": 0,
                    "matches": None,
                    "rmdirs": False,
                    "size": 0,
                    "kwargs": "kwargs",
                }
            },
            {"exists": {"name": None, "kwargs": "kwargs"}},
            {"missing": {"name": None, "kwargs": "kwargs"}},
            {
                "managed": {
                    "name": None,
                    "source": None,
                    "source_hash": "",
                    "source_hash_name": None,
                    "keep_source": True,
                    "user": None,
                    "group": None,
                    "mode": None,
                    "attrs": None,
                    "template": None,
                    "makedirs": False,
                    "dir_mode": None,
                    "context": None,
                    "replace": True,
                    "defaults": None,
                    "backup": "",
                    "show_changes": True,
                    "create": True,
                    "contents": None,
                    "tmp_dir": "",
                    "tmp_ext": "",
                    "contents_pillar": None,
                    "contents_grains": None,
                    "contents_newline": True,
                    "contents_delimiter": ":",
                    "encoding": None,
                    "encoding_errors": "strict",
                    "allow_empty": True,
                    "follow_symlinks": True,
                    "check_cmd": None,
                    "skip_verify": False,
                    "selinux": None,
                    "win_owner": None,
                    "win_perms": None,
                    "win_deny_perms": None,
                    "win_inheritance": True,
                    "win_perms_reset": False,
                    "verify_ssl": True,
                    "kwargs": "kwargs",
                }
            },
            {
                "directory": {
                    "name": None,
                    "user": None,
                    "group": None,
                    "recurse": None,
                    "max_depth": None,
                    "dir_mode": None,
                    "file_mode": None,
                    "makedirs": False,
                    "clean": False,
                    "require": None,
                    "exclude_pat": None,
                    "follow_symlinks": False,
                    "force": False,
                    "backupname": None,
                    "allow_symlink": True,
                    "children_only": False,
                    "win_owner": None,
                    "win_perms": None,
                    "win_deny_perms": None,
                    "win_inheritance": True,
                    "win_perms_reset": False,
                    "kwargs": "kwargs",
                }
            },
            {
                "recurse": {
                    "name": None,
                    "source": None,
                    "keep_source": True,
                    "clean": False,
                    "require": None,
                    "user": None,
                    "group": None,
                    "dir_mode": None,
                    "file_mode": None,
                    "sym_mode": None,
                    "template": None,
                    "context": None,
                    "replace": True,
                    "defaults": None,
                    "include_empty": False,
                    "backup": "",
                    "include_pat": None,
                    "exclude_pat": None,
                    "maxdepth": None,
                    "keep_symlinks": False,
                    "force_symlinks": False,
                    "win_owner": None,
                    "win_perms": None,
                    "win_deny_perms": None,
                    "win_inheritance": True,
                    "kwargs": "kwargs",
                }
            },
            {
                "retention_schedule": {
                    "name": None,
                    "retain": None,
                    "strptime_format": None,
                    "timezone": None,
                }
            },
            {
                "line": {
                    "name": None,
                    "content": None,
                    "match": None,
                    "mode": None,
                    "location": None,
                    "before": None,
                    "after": None,
                    "show_changes": True,
                    "backup": False,
                    "quiet": False,
                    "indent": True,
                    "create": False,
                    "user": None,
                    "group": None,
                    "file_mode": None,
                }
            },
            {
                "replace": {
                    "name": None,
                    "pattern": None,
                    "repl": None,
                    "count": 0,
                    "flags": 8,
                    "bufsize": 1,
                    "append_if_not_found": False,
                    "prepend_if_not_found": False,
                    "not_found_content": None,
                    "backup": ".bak",
                    "show_changes": True,
                    "ignore_if_missing": False,
                    "backslash_literal": False,
                }
            },
            {
                "keyvalue": {
                    "name": None,
                    "key": None,
                    "value": None,
                    "key_values": None,
                    "separator": "=",
                    "append_if_not_found": False,
                    "prepend_if_not_found": False,
                    "search_only": False,
                    "show_changes": True,
                    "ignore_if_missing": False,
                    "count": 1,
                    "uncomment": None,
                    "key_ignore_case": False,
                    "value_ignore_case": False,
                }
            },
            {
                "blockreplace": {
                    "name": None,
                    "marker_start": "#-- start managed zone --",
                    "marker_end": "#-- end managed zone --",
                    "source": None,
                    "source_hash": None,
                    "template": "jinja",
                    "sources": None,
                    "source_hashes": None,
                    "defaults": None,
                    "context": None,
                    "content": "",
                    "append_if_not_found": False,
                    "prepend_if_not_found": False,
                    "backup": ".bak",
                    "show_changes": True,
                    "append_newline": None,
                    "insert_before_match": None,
                    "insert_after_match": None,
                }
            },
            {
                "comment": {
                    "name": None,
                    "regex": None,
                    "char": "#",
                    "backup": ".bak",
                }
            },
            {
                "uncomment": {
                    "name": None,
                    "regex": None,
                    "char": "#",
                    "backup": ".bak",
                }
            },
            {
                "append": {
                    "name": None,
                    "text": None,
                    "makedirs": False,
                    "source": None,
                    "source_hash": None,
                    "template": "jinja",
                    "sources": None,
                    "source_hashes": None,
                    "defaults": None,
                    "context": None,
                    "ignore_whitespace": True,
                }
            },
            {
                "prepend": {
                    "name": None,
                    "text": None,
                    "makedirs": False,
                    "source": None,
                    "source_hash": None,
                    "template": "jinja",
                    "sources": None,
                    "source_hashes": None,
                    "defaults": None,
                    "context": None,
                    "header": None,
                }
            },
            {
                "patch": {
                    "name": None,
                    "source": None,
                    "source_hash": None,
                    "source_hash_name": None,
                    "skip_verify": False,
                    "template": None,
                    "context": None,
                    "defaults": None,
                    "options": "",
                    "reject_file": None,
                    "strip": None,
                    "saltenv": None,
                    "kwargs": "kwargs",
                }
            },
            {
                "touch": {
                    "name": None,
                    "atime": None,
                    "mtime": None,
                    "makedirs": False,
                }
            },
            {
                "copy": {
                    "name": None,
                    "source": None,
                    "force": False,
                    "makedirs": False,
                    "preserve": False,
                    "user": None,
                    "group": None,
                    "mode": None,
                    "subdir": False,
                    "kwargs": "kwargs",
                }
            },
            {
                "rename": {
                    "name": None,
                    "source": None,
                    "force": False,
                    "makedirs": False,
                    "kwargs": "kwargs",
                }
            },
            {
                "accumulated": {
                    "name": None,
                    "filename": None,
                    "text": None,
                    "kwargs": "kwargs",
                }
            },
            {
                "serialize": {
                    "name": None,
                    "dataset": None,
                    "dataset_pillar": None,
                    "user": None,
                    "group": None,
                    "mode": None,
                    "backup": "",
                    "makedirs": False,
                    "show_changes": True,
                    "create": True,
                    "merge_if_exists": False,
                    "encoding": None,
                    "encoding_errors": "strict",
                    "serializer": None,
                    "serializer_opts": None,
                    "deserializer_opts": None,
                    "kwargs": "kwargs",
                }
            },
            {
                "mknod": {
                    "name": None,
                    "ntype": None,
                    "major": 0,
                    "minor": 0,
                    "user": None,
                    "group": None,
                    "mode": "0600",
                }
            },
            {
                "mod_run_check_cmd": {
                    "cmd": None,
                    "filename": None,
                    "kwargs": "check_cmd_opts",
                }
            },
            {
                "decode": {
                    "name": None,
                    "encoded_data": None,
                    "contents_pillar": None,
                    "encoding_type": "base64",
                    "checksum": "md5",
                }
            },
            {
                "shortcut": {
                    "name": None,
                    "target": None,
                    "arguments": None,
                    "working_dir": None,
                    "description": None,
                    "icon_location": None,
                    "force": False,
                    "backupname": None,
                    "makedirs": False,
                    "user": None,
                    "kwargs": "kwargs",
                }
            },
            {
                "cached": {
                    "name": None,
                    "source_hash": "",
                    "source_hash_name": None,
                    "skip_verify": False,
                    "saltenv": "base",
                }
            },
            {"not_cached": {"name": None, "saltenv": "base"}},
        ],
        MODULE_DOCS,
    )
}

salt_server.post_init(FILE_NAME_COMPLETER)


class TestStateNameCompletion:
    def test_complete_of_file(self):
        txt_doc = {
            "text_document": SimpleNamespace(uri="foo.sls", text=TEST_FILE)
        }
        salt_server.register_file(SimpleNamespace(**txt_doc))

        completions = salt_server.complete_state_name(
            SimpleNamespace(
                **{
                    **txt_doc,
                    "position": SimpleNamespace(line=6, character=7),
                    "context": SimpleNamespace(trigger_character="."),
                }
            )
        )

        expected_completions = [
            (submod_name, MODULE_DOCS[f"file.{submod_name}"])
            for submod_name in FILE_NAME_COMPLETER["file"].state_sub_names
        ]
        assert completions == expected_completions
